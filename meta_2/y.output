Terminals unused in grammar

    RESERVED


Grammar

    0 $accept: Program $end

    1 Program: FunctionsAndDeclarations

    2 FunctionsAndDeclarations: FunctionsAndDeclarations FunctionDefinition
    3                         | FunctionsAndDeclarations FunctionDeclaration
    4                         | FunctionsAndDeclarations Declaration
    5                         | FunctionDefinition
    6                         | FunctionDeclaration
    7                         | Declaration

    8 FunctionDefinition: TypeSpec FunctionDeclarator FunctionBody

    9 FunctionBody: LBRACE DeclarationAndStatements RBRACE
   10             | LBRACE RBRACE

   11 DeclarationAndStatements: DeclarationAndStatements Statement
   12                         | DeclarationAndStatements Declaration
   13                         | Statement
   14                         | Declaration

   15 FunctionDeclaration: TypeSpec FunctionDeclarator SEMI

   16 FunctionDeclarator: IDENTIFIER LPAR ParameterList RPAR

   17 ParameterList: ParameterDeclaration
   18              | ParameterList COMMA ParameterDeclaration

   19 ParameterDeclaration: TypeSpec IDENTIFIER
   20                     | TypeSpec

   21 Declaration: TypeSpec AuxDeclaration SEMI
   22            | error SEMI

   23 AuxDeclaration: AuxDeclaration COMMA Declarator
   24               | Declarator

   25 TypeSpec: CHR
   26         | INT
   27         | VOID
   28         | SHORT
   29         | DOUBLE

   30 Declarator: IDENTIFIER ASSIGN Expr_comma
   31           | IDENTIFIER

   32 Statement_error: error SEMI
   33                | Statement

   34 AuxStatement: AuxStatement Statement_error
   35             | Statement_error

   36 Statement: LBRACE AuxStatement RBRACE
   37          | SEMI
   38          | LBRACE error RBRACE
   39          | LBRACE RBRACE
   40          | Expr_comma SEMI
   41          | IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | IF LPAR Expr_comma RPAR Statement_error
   43          | WHILE LPAR Expr_comma RPAR Statement_error
   44          | RETURN Expr_comma SEMI
   45          | RETURN SEMI

   46 Expr_call: Expr_call COMMA Expr
   47          | Expr

   48 Expr_comma: Expr_comma COMMA Expr
   49           | Expr

   50 Expr: IDENTIFIER LPAR error RPAR
   51     | LPAR error RPAR
   52     | Expr ASSIGN Expr
   53     | Expr PLUS Expr
   54     | Expr MINUS Expr
   55     | Expr MUL Expr
   56     | Expr DIV Expr
   57     | Expr MOD Expr
   58     | Expr OR Expr
   59     | Expr AND Expr
   60     | Expr BITWISEAND Expr
   61     | Expr BITWISEOR Expr
   62     | Expr BITWISEXOR Expr
   63     | Expr EQ Expr
   64     | Expr NE Expr
   65     | Expr LE Expr
   66     | Expr GE Expr
   67     | Expr LT Expr
   68     | Expr GT Expr
   69     | PLUS Expr
   70     | MINUS Expr
   71     | NOT Expr
   72     | IDENTIFIER LPAR RPAR
   73     | IDENTIFIER LPAR Expr_call RPAR
   74     | IDENTIFIER
   75     | NATURAL
   76     | CHRLIT
   77     | DECIMAL
   78     | LPAR Expr_comma RPAR


Terminals, with rules where they appear

    $end (0) 0
    error (256) 22 32 38 50 51
    BITWISEAND (258) 60
    BITWISEOR (259) 61
    BITWISEXOR (260) 62
    AND (261) 59
    ASSIGN (262) 30 52
    MUL (263) 55
    COMMA (264) 18 23 46 48
    DIV (265) 56
    EQ (266) 63
    GE (267) 66
    GT (268) 68
    LBRACE (269) 9 10 36 38 39
    LE (270) 65
    LPAR (271) 16 41 42 43 50 51 72 73 78
    LT (272) 67
    MINUS (273) 54 70
    MOD (274) 57
    NE (275) 64
    NOT (276) 71
    OR (277) 58
    PLUS (278) 53 69
    RBRACE (279) 9 10 36 38 39
    RPAR (280) 16 41 42 43 50 51 72 73 78
    SEMI (281) 15 21 22 32 37 40 44 45
    CHR (282) 25
    ELSE (283) 41
    WHILE (284) 43
    IF (285) 41 42
    INT (286) 26
    SHORT (287) 28
    DOUBLE (288) 29
    RETURN (289) 44 45
    VOID (290) 27
    IDENTIFIER <lexeme> (291) 16 19 30 31 50 72 73 74
    DECIMAL <lexeme> (292) 77
    NATURAL <lexeme> (293) 75
    CHRLIT <lexeme> (294) 76
    RESERVED <lexeme> (295)


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    Program <node> (42)
        on left: 1
        on right: 0
    FunctionsAndDeclarations <node> (43)
        on left: 2 3 4 5 6 7
        on right: 1 2 3 4
    FunctionDefinition <node> (44)
        on left: 8
        on right: 2 5
    FunctionBody <node> (45)
        on left: 9 10
        on right: 8
    DeclarationAndStatements <node> (46)
        on left: 11 12 13 14
        on right: 9 11 12
    FunctionDeclaration <node> (47)
        on left: 15
        on right: 3 6
    FunctionDeclarator <node> (48)
        on left: 16
        on right: 8 15
    ParameterList <node> (49)
        on left: 17 18
        on right: 16 18
    ParameterDeclaration <node> (50)
        on left: 19 20
        on right: 17 18
    Declaration <node> (51)
        on left: 21 22
        on right: 4 7 12 14
    AuxDeclaration <node> (52)
        on left: 23 24
        on right: 21 23
    TypeSpec <node> (53)
        on left: 25 26 27 28 29
        on right: 8 15 19 20 21
    Declarator <node> (54)
        on left: 30 31
        on right: 23 24
    Statement_error <node> (55)
        on left: 32 33
        on right: 34 35 41 42 43
    AuxStatement <node> (56)
        on left: 34 35
        on right: 34 36
    Statement <node> (57)
        on left: 36 37 38 39 40 41 42 43 44 45
        on right: 11 13 33
    Expr_call <node> (58)
        on left: 46 47
        on right: 46 73
    Expr_comma <node> (59)
        on left: 48 49
        on right: 30 40 41 42 43 44 48 78
    Expr <node> (60)
        on left: 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78
        on right: 46 47 48 49 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71


State 0

    0 $accept: • Program $end
    1 Program: • FunctionsAndDeclarations
    2 FunctionsAndDeclarations: • FunctionsAndDeclarations FunctionDefinition
    3                         | • FunctionsAndDeclarations FunctionDeclaration
    4                         | • FunctionsAndDeclarations Declaration
    5                         | • FunctionDefinition
    6                         | • FunctionDeclaration
    7                         | • Declaration
    8 FunctionDefinition: • TypeSpec FunctionDeclarator FunctionBody
   15 FunctionDeclaration: • TypeSpec FunctionDeclarator SEMI
   21 Declaration: • TypeSpec AuxDeclaration SEMI
   22            | • error SEMI
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    error   shift, and go to state 1
    CHR     shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    VOID    shift, and go to state 6

    Program                   go to state 7
    FunctionsAndDeclarations  go to state 8
    FunctionDefinition        go to state 9
    FunctionDeclaration       go to state 10
    Declaration               go to state 11
    TypeSpec                  go to state 12


State 1

   22 Declaration: error • SEMI

    SEMI  shift, and go to state 13


State 2

   25 TypeSpec: CHR •

    $default  reduce using rule 25 (TypeSpec)


State 3

   26 TypeSpec: INT •

    $default  reduce using rule 26 (TypeSpec)


State 4

   28 TypeSpec: SHORT •

    $default  reduce using rule 28 (TypeSpec)


State 5

   29 TypeSpec: DOUBLE •

    $default  reduce using rule 29 (TypeSpec)


State 6

   27 TypeSpec: VOID •

    $default  reduce using rule 27 (TypeSpec)


State 7

    0 $accept: Program • $end

    $end  shift, and go to state 14


State 8

    1 Program: FunctionsAndDeclarations •  [$end]
    2 FunctionsAndDeclarations: FunctionsAndDeclarations • FunctionDefinition
    3                         | FunctionsAndDeclarations • FunctionDeclaration
    4                         | FunctionsAndDeclarations • Declaration
    8 FunctionDefinition: • TypeSpec FunctionDeclarator FunctionBody
   15 FunctionDeclaration: • TypeSpec FunctionDeclarator SEMI
   21 Declaration: • TypeSpec AuxDeclaration SEMI
   22            | • error SEMI
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    error   shift, and go to state 1
    CHR     shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    VOID    shift, and go to state 6

    $end  reduce using rule 1 (Program)

    FunctionDefinition   go to state 15
    FunctionDeclaration  go to state 16
    Declaration          go to state 17
    TypeSpec             go to state 12


State 9

    5 FunctionsAndDeclarations: FunctionDefinition •

    $default  reduce using rule 5 (FunctionsAndDeclarations)


State 10

    6 FunctionsAndDeclarations: FunctionDeclaration •

    $default  reduce using rule 6 (FunctionsAndDeclarations)


State 11

    7 FunctionsAndDeclarations: Declaration •

    $default  reduce using rule 7 (FunctionsAndDeclarations)


State 12

    8 FunctionDefinition: TypeSpec • FunctionDeclarator FunctionBody
   15 FunctionDeclaration: TypeSpec • FunctionDeclarator SEMI
   16 FunctionDeclarator: • IDENTIFIER LPAR ParameterList RPAR
   21 Declaration: TypeSpec • AuxDeclaration SEMI
   23 AuxDeclaration: • AuxDeclaration COMMA Declarator
   24               | • Declarator
   30 Declarator: • IDENTIFIER ASSIGN Expr_comma
   31           | • IDENTIFIER

    IDENTIFIER  shift, and go to state 18

    FunctionDeclarator  go to state 19
    AuxDeclaration      go to state 20
    Declarator          go to state 21


State 13

   22 Declaration: error SEMI •

    $default  reduce using rule 22 (Declaration)


State 14

    0 $accept: Program $end •

    $default  accept


State 15

    2 FunctionsAndDeclarations: FunctionsAndDeclarations FunctionDefinition •

    $default  reduce using rule 2 (FunctionsAndDeclarations)


State 16

    3 FunctionsAndDeclarations: FunctionsAndDeclarations FunctionDeclaration •

    $default  reduce using rule 3 (FunctionsAndDeclarations)


State 17

    4 FunctionsAndDeclarations: FunctionsAndDeclarations Declaration •

    $default  reduce using rule 4 (FunctionsAndDeclarations)


State 18

   16 FunctionDeclarator: IDENTIFIER • LPAR ParameterList RPAR
   30 Declarator: IDENTIFIER • ASSIGN Expr_comma
   31           | IDENTIFIER •  [COMMA, SEMI]

    ASSIGN  shift, and go to state 22
    LPAR    shift, and go to state 23

    $default  reduce using rule 31 (Declarator)


State 19

    8 FunctionDefinition: TypeSpec FunctionDeclarator • FunctionBody
    9 FunctionBody: • LBRACE DeclarationAndStatements RBRACE
   10             | • LBRACE RBRACE
   15 FunctionDeclaration: TypeSpec FunctionDeclarator • SEMI

    LBRACE  shift, and go to state 24
    SEMI    shift, and go to state 25

    FunctionBody  go to state 26


State 20

   21 Declaration: TypeSpec AuxDeclaration • SEMI
   23 AuxDeclaration: AuxDeclaration • COMMA Declarator

    COMMA  shift, and go to state 27
    SEMI   shift, and go to state 28


State 21

   24 AuxDeclaration: Declarator •

    $default  reduce using rule 24 (AuxDeclaration)


State 22

   30 Declarator: IDENTIFIER ASSIGN • Expr_comma
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr_comma  go to state 37
    Expr        go to state 38


State 23

   16 FunctionDeclarator: IDENTIFIER LPAR • ParameterList RPAR
   17 ParameterList: • ParameterDeclaration
   18              | • ParameterList COMMA ParameterDeclaration
   19 ParameterDeclaration: • TypeSpec IDENTIFIER
   20                     | • TypeSpec
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHR     shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    VOID    shift, and go to state 6

    ParameterList         go to state 39
    ParameterDeclaration  go to state 40
    TypeSpec              go to state 41


State 24

    9 FunctionBody: LBRACE • DeclarationAndStatements RBRACE
   10             | LBRACE • RBRACE
   11 DeclarationAndStatements: • DeclarationAndStatements Statement
   12                         | • DeclarationAndStatements Declaration
   13                         | • Statement
   14                         | • Declaration
   21 Declaration: • TypeSpec AuxDeclaration SEMI
   22            | • error SEMI
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    error       shift, and go to state 1
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    RBRACE      shift, and go to state 43
    SEMI        shift, and go to state 44
    CHR         shift, and go to state 2
    WHILE       shift, and go to state 45
    IF          shift, and go to state 46
    INT         shift, and go to state 3
    SHORT       shift, and go to state 4
    DOUBLE      shift, and go to state 5
    RETURN      shift, and go to state 47
    VOID        shift, and go to state 6
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    DeclarationAndStatements  go to state 48
    Declaration               go to state 49
    TypeSpec                  go to state 50
    Statement                 go to state 51
    Expr_comma                go to state 52
    Expr                      go to state 38


State 25

   15 FunctionDeclaration: TypeSpec FunctionDeclarator SEMI •

    $default  reduce using rule 15 (FunctionDeclaration)


State 26

    8 FunctionDefinition: TypeSpec FunctionDeclarator FunctionBody •

    $default  reduce using rule 8 (FunctionDefinition)


State 27

   23 AuxDeclaration: AuxDeclaration COMMA • Declarator
   30 Declarator: • IDENTIFIER ASSIGN Expr_comma
   31           | • IDENTIFIER

    IDENTIFIER  shift, and go to state 53

    Declarator  go to state 54


State 28

   21 Declaration: TypeSpec AuxDeclaration SEMI •

    $default  reduce using rule 21 (Declaration)


State 29

   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   51     | LPAR • error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR
   78     | LPAR • Expr_comma RPAR

    error       shift, and go to state 55
    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr_comma  go to state 56
    Expr        go to state 38


State 30

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   70     | MINUS • Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 57


State 31

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   71     | NOT • Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 58


State 32

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   69     | PLUS • Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 59


State 33

   50 Expr: IDENTIFIER • LPAR error RPAR
   72     | IDENTIFIER • LPAR RPAR
   73     | IDENTIFIER • LPAR Expr_call RPAR
   74     | IDENTIFIER •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]

    LPAR  shift, and go to state 60

    $default  reduce using rule 74 (Expr)


State 34

   77 Expr: DECIMAL •

    $default  reduce using rule 77 (Expr)


State 35

   75 Expr: NATURAL •

    $default  reduce using rule 75 (Expr)


State 36

   76 Expr: CHRLIT •

    $default  reduce using rule 76 (Expr)


State 37

   30 Declarator: IDENTIFIER ASSIGN Expr_comma •  [COMMA, SEMI]
   48 Expr_comma: Expr_comma • COMMA Expr

    $default  reduce using rule 30 (Declarator)

    Conflict between rule 30 and token COMMA resolved as reduce (COMMA < ASSIGN).


State 38

   49 Expr_comma: Expr •  [COMMA, RPAR, SEMI]
   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    BITWISEAND  shift, and go to state 62
    BITWISEOR   shift, and go to state 63
    BITWISEXOR  shift, and go to state 64
    AND         shift, and go to state 65
    ASSIGN      shift, and go to state 66
    MUL         shift, and go to state 67
    DIV         shift, and go to state 68
    EQ          shift, and go to state 69
    GE          shift, and go to state 70
    GT          shift, and go to state 71
    LE          shift, and go to state 72
    LT          shift, and go to state 73
    MINUS       shift, and go to state 74
    MOD         shift, and go to state 75
    NE          shift, and go to state 76
    OR          shift, and go to state 77
    PLUS        shift, and go to state 78

    $default  reduce using rule 49 (Expr_comma)


State 39

   16 FunctionDeclarator: IDENTIFIER LPAR ParameterList • RPAR
   18 ParameterList: ParameterList • COMMA ParameterDeclaration

    COMMA  shift, and go to state 79
    RPAR   shift, and go to state 80


State 40

   17 ParameterList: ParameterDeclaration •

    $default  reduce using rule 17 (ParameterList)


State 41

   19 ParameterDeclaration: TypeSpec • IDENTIFIER
   20                     | TypeSpec •  [COMMA, RPAR]

    IDENTIFIER  shift, and go to state 81

    $default  reduce using rule 20 (ParameterDeclaration)


State 42

   32 Statement_error: • error SEMI
   33                | • Statement
   34 AuxStatement: • AuxStatement Statement_error
   35             | • Statement_error
   36 Statement: • LBRACE AuxStatement RBRACE
   36          | LBRACE • AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   38          | LBRACE • error RBRACE
   39          | • LBRACE RBRACE
   39          | LBRACE • RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    error       shift, and go to state 82
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    RBRACE      shift, and go to state 83
    SEMI        shift, and go to state 44
    WHILE       shift, and go to state 45
    IF          shift, and go to state 46
    RETURN      shift, and go to state 47
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Statement_error  go to state 84
    AuxStatement     go to state 85
    Statement        go to state 86
    Expr_comma       go to state 52
    Expr             go to state 38


State 43

   10 FunctionBody: LBRACE RBRACE •

    $default  reduce using rule 10 (FunctionBody)


State 44

   37 Statement: SEMI •

    $default  reduce using rule 37 (Statement)


State 45

   43 Statement: WHILE • LPAR Expr_comma RPAR Statement_error

    LPAR  shift, and go to state 87


State 46

   41 Statement: IF • LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | IF • LPAR Expr_comma RPAR Statement_error

    LPAR  shift, and go to state 88


State 47

   44 Statement: RETURN • Expr_comma SEMI
   45          | RETURN • SEMI
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    SEMI        shift, and go to state 89
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr_comma  go to state 90
    Expr        go to state 38


State 48

    9 FunctionBody: LBRACE DeclarationAndStatements • RBRACE
   11 DeclarationAndStatements: DeclarationAndStatements • Statement
   12                         | DeclarationAndStatements • Declaration
   21 Declaration: • TypeSpec AuxDeclaration SEMI
   22            | • error SEMI
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    error       shift, and go to state 1
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    RBRACE      shift, and go to state 91
    SEMI        shift, and go to state 44
    CHR         shift, and go to state 2
    WHILE       shift, and go to state 45
    IF          shift, and go to state 46
    INT         shift, and go to state 3
    SHORT       shift, and go to state 4
    DOUBLE      shift, and go to state 5
    RETURN      shift, and go to state 47
    VOID        shift, and go to state 6
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Declaration  go to state 92
    TypeSpec     go to state 50
    Statement    go to state 93
    Expr_comma   go to state 52
    Expr         go to state 38


State 49

   14 DeclarationAndStatements: Declaration •

    $default  reduce using rule 14 (DeclarationAndStatements)


State 50

   21 Declaration: TypeSpec • AuxDeclaration SEMI
   23 AuxDeclaration: • AuxDeclaration COMMA Declarator
   24               | • Declarator
   30 Declarator: • IDENTIFIER ASSIGN Expr_comma
   31           | • IDENTIFIER

    IDENTIFIER  shift, and go to state 53

    AuxDeclaration  go to state 20
    Declarator      go to state 21


State 51

   13 DeclarationAndStatements: Statement •

    $default  reduce using rule 13 (DeclarationAndStatements)


State 52

   40 Statement: Expr_comma • SEMI
   48 Expr_comma: Expr_comma • COMMA Expr

    COMMA  shift, and go to state 61
    SEMI   shift, and go to state 94


State 53

   30 Declarator: IDENTIFIER • ASSIGN Expr_comma
   31           | IDENTIFIER •  [COMMA, SEMI]

    ASSIGN  shift, and go to state 22

    $default  reduce using rule 31 (Declarator)


State 54

   23 AuxDeclaration: AuxDeclaration COMMA Declarator •

    $default  reduce using rule 23 (AuxDeclaration)


State 55

   51 Expr: LPAR error • RPAR

    RPAR  shift, and go to state 95


State 56

   48 Expr_comma: Expr_comma • COMMA Expr
   78 Expr: LPAR Expr_comma • RPAR

    COMMA  shift, and go to state 61
    RPAR   shift, and go to state 96


State 57

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr
   70     | MINUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]

    $default  reduce using rule 70 (Expr)

    Conflict between rule 70 and token BITWISEAND resolved as reduce (BITWISEAND < NOT).
    Conflict between rule 70 and token BITWISEOR resolved as reduce (BITWISEOR < NOT).
    Conflict between rule 70 and token BITWISEXOR resolved as reduce (BITWISEXOR < NOT).
    Conflict between rule 70 and token AND resolved as reduce (AND < NOT).
    Conflict between rule 70 and token ASSIGN resolved as reduce (ASSIGN < NOT).
    Conflict between rule 70 and token MUL resolved as reduce (MUL < NOT).
    Conflict between rule 70 and token DIV resolved as reduce (DIV < NOT).
    Conflict between rule 70 and token EQ resolved as reduce (EQ < NOT).
    Conflict between rule 70 and token GE resolved as reduce (GE < NOT).
    Conflict between rule 70 and token GT resolved as reduce (GT < NOT).
    Conflict between rule 70 and token LE resolved as reduce (LE < NOT).
    Conflict between rule 70 and token LT resolved as reduce (LT < NOT).
    Conflict between rule 70 and token MINUS resolved as reduce (MINUS < NOT).
    Conflict between rule 70 and token MOD resolved as reduce (MOD < NOT).
    Conflict between rule 70 and token NE resolved as reduce (NE < NOT).
    Conflict between rule 70 and token OR resolved as reduce (OR < NOT).
    Conflict between rule 70 and token PLUS resolved as reduce (PLUS < NOT).


State 58

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr
   71     | NOT Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]

    $default  reduce using rule 71 (Expr)

    Conflict between rule 71 and token BITWISEAND resolved as reduce (BITWISEAND < NOT).
    Conflict between rule 71 and token BITWISEOR resolved as reduce (BITWISEOR < NOT).
    Conflict between rule 71 and token BITWISEXOR resolved as reduce (BITWISEXOR < NOT).
    Conflict between rule 71 and token AND resolved as reduce (AND < NOT).
    Conflict between rule 71 and token ASSIGN resolved as reduce (ASSIGN < NOT).
    Conflict between rule 71 and token MUL resolved as reduce (MUL < NOT).
    Conflict between rule 71 and token DIV resolved as reduce (DIV < NOT).
    Conflict between rule 71 and token EQ resolved as reduce (EQ < NOT).
    Conflict between rule 71 and token GE resolved as reduce (GE < NOT).
    Conflict between rule 71 and token GT resolved as reduce (GT < NOT).
    Conflict between rule 71 and token LE resolved as reduce (LE < NOT).
    Conflict between rule 71 and token LT resolved as reduce (LT < NOT).
    Conflict between rule 71 and token MINUS resolved as reduce (MINUS < NOT).
    Conflict between rule 71 and token MOD resolved as reduce (MOD < NOT).
    Conflict between rule 71 and token NE resolved as reduce (NE < NOT).
    Conflict between rule 71 and token OR resolved as reduce (OR < NOT).
    Conflict between rule 71 and token PLUS resolved as reduce (PLUS < NOT).


State 59

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr
   69     | PLUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]

    $default  reduce using rule 69 (Expr)

    Conflict between rule 69 and token BITWISEAND resolved as reduce (BITWISEAND < NOT).
    Conflict between rule 69 and token BITWISEOR resolved as reduce (BITWISEOR < NOT).
    Conflict between rule 69 and token BITWISEXOR resolved as reduce (BITWISEXOR < NOT).
    Conflict between rule 69 and token AND resolved as reduce (AND < NOT).
    Conflict between rule 69 and token ASSIGN resolved as reduce (ASSIGN < NOT).
    Conflict between rule 69 and token MUL resolved as reduce (MUL < NOT).
    Conflict between rule 69 and token DIV resolved as reduce (DIV < NOT).
    Conflict between rule 69 and token EQ resolved as reduce (EQ < NOT).
    Conflict between rule 69 and token GE resolved as reduce (GE < NOT).
    Conflict between rule 69 and token GT resolved as reduce (GT < NOT).
    Conflict between rule 69 and token LE resolved as reduce (LE < NOT).
    Conflict between rule 69 and token LT resolved as reduce (LT < NOT).
    Conflict between rule 69 and token MINUS resolved as reduce (MINUS < NOT).
    Conflict between rule 69 and token MOD resolved as reduce (MOD < NOT).
    Conflict between rule 69 and token NE resolved as reduce (NE < NOT).
    Conflict between rule 69 and token OR resolved as reduce (OR < NOT).
    Conflict between rule 69 and token PLUS resolved as reduce (PLUS < NOT).


State 60

   46 Expr_call: • Expr_call COMMA Expr
   47          | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   50     | IDENTIFIER LPAR • error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   72     | IDENTIFIER LPAR • RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   73     | IDENTIFIER LPAR • Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    error       shift, and go to state 97
    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    RPAR        shift, and go to state 98
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr_call  go to state 99
    Expr       go to state 100


State 61

   48 Expr_comma: Expr_comma COMMA • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 101


State 62

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   60     | Expr BITWISEAND • Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 102


State 63

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   61     | Expr BITWISEOR • Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 103


State 64

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   62     | Expr BITWISEXOR • Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 104


State 65

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   59     | Expr AND • Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 105


State 66

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   52     | Expr ASSIGN • Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 106


State 67

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   55     | Expr MUL • Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 107


State 68

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   56     | Expr DIV • Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 108


State 69

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   63     | Expr EQ • Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 109


State 70

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   66     | Expr GE • Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 110


State 71

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   68     | Expr GT • Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 111


State 72

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   65     | Expr LE • Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 112


State 73

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   67     | Expr LT • Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 113


State 74

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   54     | Expr MINUS • Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 114


State 75

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   57     | Expr MOD • Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 115


State 76

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   64     | Expr NE • Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 116


State 77

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   58     | Expr OR • Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 117


State 78

   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   53     | Expr PLUS • Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 118


State 79

   18 ParameterList: ParameterList COMMA • ParameterDeclaration
   19 ParameterDeclaration: • TypeSpec IDENTIFIER
   20                     | • TypeSpec
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHR     shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    VOID    shift, and go to state 6

    ParameterDeclaration  go to state 119
    TypeSpec              go to state 41


State 80

   16 FunctionDeclarator: IDENTIFIER LPAR ParameterList RPAR •

    $default  reduce using rule 16 (FunctionDeclarator)


State 81

   19 ParameterDeclaration: TypeSpec IDENTIFIER •

    $default  reduce using rule 19 (ParameterDeclaration)


State 82

   32 Statement_error: error • SEMI
   38 Statement: LBRACE error • RBRACE

    RBRACE  shift, and go to state 120
    SEMI    shift, and go to state 121


State 83

   39 Statement: LBRACE RBRACE •

    $default  reduce using rule 39 (Statement)


State 84

   35 AuxStatement: Statement_error •

    $default  reduce using rule 35 (AuxStatement)


State 85

   32 Statement_error: • error SEMI
   33                | • Statement
   34 AuxStatement: AuxStatement • Statement_error
   36 Statement: • LBRACE AuxStatement RBRACE
   36          | LBRACE AuxStatement • RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    error       shift, and go to state 122
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    RBRACE      shift, and go to state 123
    SEMI        shift, and go to state 44
    WHILE       shift, and go to state 45
    IF          shift, and go to state 46
    RETURN      shift, and go to state 47
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Statement_error  go to state 124
    Statement        go to state 86
    Expr_comma       go to state 52
    Expr             go to state 38


State 86

   33 Statement_error: Statement •

    $default  reduce using rule 33 (Statement_error)


State 87

   43 Statement: WHILE LPAR • Expr_comma RPAR Statement_error
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr_comma  go to state 125
    Expr        go to state 38


State 88

   41 Statement: IF LPAR • Expr_comma RPAR Statement_error ELSE Statement_error
   42          | IF LPAR • Expr_comma RPAR Statement_error
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr_comma  go to state 126
    Expr        go to state 38


State 89

   45 Statement: RETURN SEMI •

    $default  reduce using rule 45 (Statement)


State 90

   44 Statement: RETURN Expr_comma • SEMI
   48 Expr_comma: Expr_comma • COMMA Expr

    COMMA  shift, and go to state 61
    SEMI   shift, and go to state 127


State 91

    9 FunctionBody: LBRACE DeclarationAndStatements RBRACE •

    $default  reduce using rule 9 (FunctionBody)


State 92

   12 DeclarationAndStatements: DeclarationAndStatements Declaration •

    $default  reduce using rule 12 (DeclarationAndStatements)


State 93

   11 DeclarationAndStatements: DeclarationAndStatements Statement •

    $default  reduce using rule 11 (DeclarationAndStatements)


State 94

   40 Statement: Expr_comma SEMI •

    $default  reduce using rule 40 (Statement)


State 95

   51 Expr: LPAR error RPAR •

    $default  reduce using rule 51 (Expr)


State 96

   78 Expr: LPAR Expr_comma RPAR •

    $default  reduce using rule 78 (Expr)


State 97

   50 Expr: IDENTIFIER LPAR error • RPAR

    RPAR  shift, and go to state 128


State 98

   72 Expr: IDENTIFIER LPAR RPAR •

    $default  reduce using rule 72 (Expr)


State 99

   46 Expr_call: Expr_call • COMMA Expr
   73 Expr: IDENTIFIER LPAR Expr_call • RPAR

    COMMA  shift, and go to state 129
    RPAR   shift, and go to state 130


State 100

   47 Expr_call: Expr •  [COMMA, RPAR]
   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    BITWISEAND  shift, and go to state 62
    BITWISEOR   shift, and go to state 63
    BITWISEXOR  shift, and go to state 64
    AND         shift, and go to state 65
    ASSIGN      shift, and go to state 66
    MUL         shift, and go to state 67
    DIV         shift, and go to state 68
    EQ          shift, and go to state 69
    GE          shift, and go to state 70
    GT          shift, and go to state 71
    LE          shift, and go to state 72
    LT          shift, and go to state 73
    MINUS       shift, and go to state 74
    MOD         shift, and go to state 75
    NE          shift, and go to state 76
    OR          shift, and go to state 77
    PLUS        shift, and go to state 78

    $default  reduce using rule 47 (Expr_call)


State 101

   48 Expr_comma: Expr_comma COMMA Expr •  [COMMA, RPAR, SEMI]
   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    BITWISEAND  shift, and go to state 62
    BITWISEOR   shift, and go to state 63
    BITWISEXOR  shift, and go to state 64
    AND         shift, and go to state 65
    ASSIGN      shift, and go to state 66
    MUL         shift, and go to state 67
    DIV         shift, and go to state 68
    EQ          shift, and go to state 69
    GE          shift, and go to state 70
    GT          shift, and go to state 71
    LE          shift, and go to state 72
    LT          shift, and go to state 73
    MINUS       shift, and go to state 74
    MOD         shift, and go to state 75
    NE          shift, and go to state 76
    OR          shift, and go to state 77
    PLUS        shift, and go to state 78

    $default  reduce using rule 48 (Expr_comma)


State 102

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   60     | Expr BITWISEAND Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    EQ     shift, and go to state 69
    GE     shift, and go to state 70
    GT     shift, and go to state 71
    LE     shift, and go to state 72
    LT     shift, and go to state 73
    MINUS  shift, and go to state 74
    MOD    shift, and go to state 75
    NE     shift, and go to state 76
    PLUS   shift, and go to state 78

    $default  reduce using rule 60 (Expr)

    Conflict between rule 60 and token BITWISEAND resolved as reduce (%left BITWISEAND).
    Conflict between rule 60 and token BITWISEOR resolved as reduce (BITWISEOR < BITWISEAND).
    Conflict between rule 60 and token BITWISEXOR resolved as reduce (BITWISEXOR < BITWISEAND).
    Conflict between rule 60 and token AND resolved as reduce (AND < BITWISEAND).
    Conflict between rule 60 and token ASSIGN resolved as reduce (ASSIGN < BITWISEAND).
    Conflict between rule 60 and token MUL resolved as shift (BITWISEAND < MUL).
    Conflict between rule 60 and token DIV resolved as shift (BITWISEAND < DIV).
    Conflict between rule 60 and token EQ resolved as shift (BITWISEAND < EQ).
    Conflict between rule 60 and token GE resolved as shift (BITWISEAND < GE).
    Conflict between rule 60 and token GT resolved as shift (BITWISEAND < GT).
    Conflict between rule 60 and token LE resolved as shift (BITWISEAND < LE).
    Conflict between rule 60 and token LT resolved as shift (BITWISEAND < LT).
    Conflict between rule 60 and token MINUS resolved as shift (BITWISEAND < MINUS).
    Conflict between rule 60 and token MOD resolved as shift (BITWISEAND < MOD).
    Conflict between rule 60 and token NE resolved as shift (BITWISEAND < NE).
    Conflict between rule 60 and token OR resolved as reduce (OR < BITWISEAND).
    Conflict between rule 60 and token PLUS resolved as shift (BITWISEAND < PLUS).


State 103

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   61     | Expr BITWISEOR Expr •  [BITWISEOR, AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    BITWISEAND  shift, and go to state 62
    BITWISEXOR  shift, and go to state 64
    MUL         shift, and go to state 67
    DIV         shift, and go to state 68
    EQ          shift, and go to state 69
    GE          shift, and go to state 70
    GT          shift, and go to state 71
    LE          shift, and go to state 72
    LT          shift, and go to state 73
    MINUS       shift, and go to state 74
    MOD         shift, and go to state 75
    NE          shift, and go to state 76
    PLUS        shift, and go to state 78

    $default  reduce using rule 61 (Expr)

    Conflict between rule 61 and token BITWISEAND resolved as shift (BITWISEOR < BITWISEAND).
    Conflict between rule 61 and token BITWISEOR resolved as reduce (%left BITWISEOR).
    Conflict between rule 61 and token BITWISEXOR resolved as shift (BITWISEOR < BITWISEXOR).
    Conflict between rule 61 and token AND resolved as reduce (AND < BITWISEOR).
    Conflict between rule 61 and token ASSIGN resolved as reduce (ASSIGN < BITWISEOR).
    Conflict between rule 61 and token MUL resolved as shift (BITWISEOR < MUL).
    Conflict between rule 61 and token DIV resolved as shift (BITWISEOR < DIV).
    Conflict between rule 61 and token EQ resolved as shift (BITWISEOR < EQ).
    Conflict between rule 61 and token GE resolved as shift (BITWISEOR < GE).
    Conflict between rule 61 and token GT resolved as shift (BITWISEOR < GT).
    Conflict between rule 61 and token LE resolved as shift (BITWISEOR < LE).
    Conflict between rule 61 and token LT resolved as shift (BITWISEOR < LT).
    Conflict between rule 61 and token MINUS resolved as shift (BITWISEOR < MINUS).
    Conflict between rule 61 and token MOD resolved as shift (BITWISEOR < MOD).
    Conflict between rule 61 and token NE resolved as shift (BITWISEOR < NE).
    Conflict between rule 61 and token OR resolved as reduce (OR < BITWISEOR).
    Conflict between rule 61 and token PLUS resolved as shift (BITWISEOR < PLUS).


State 104

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   62     | Expr BITWISEXOR Expr •  [BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    BITWISEAND  shift, and go to state 62
    MUL         shift, and go to state 67
    DIV         shift, and go to state 68
    EQ          shift, and go to state 69
    GE          shift, and go to state 70
    GT          shift, and go to state 71
    LE          shift, and go to state 72
    LT          shift, and go to state 73
    MINUS       shift, and go to state 74
    MOD         shift, and go to state 75
    NE          shift, and go to state 76
    PLUS        shift, and go to state 78

    $default  reduce using rule 62 (Expr)

    Conflict between rule 62 and token BITWISEAND resolved as shift (BITWISEXOR < BITWISEAND).
    Conflict between rule 62 and token BITWISEOR resolved as reduce (BITWISEOR < BITWISEXOR).
    Conflict between rule 62 and token BITWISEXOR resolved as reduce (%left BITWISEXOR).
    Conflict between rule 62 and token AND resolved as reduce (AND < BITWISEXOR).
    Conflict between rule 62 and token ASSIGN resolved as reduce (ASSIGN < BITWISEXOR).
    Conflict between rule 62 and token MUL resolved as shift (BITWISEXOR < MUL).
    Conflict between rule 62 and token DIV resolved as shift (BITWISEXOR < DIV).
    Conflict between rule 62 and token EQ resolved as shift (BITWISEXOR < EQ).
    Conflict between rule 62 and token GE resolved as shift (BITWISEXOR < GE).
    Conflict between rule 62 and token GT resolved as shift (BITWISEXOR < GT).
    Conflict between rule 62 and token LE resolved as shift (BITWISEXOR < LE).
    Conflict between rule 62 and token LT resolved as shift (BITWISEXOR < LT).
    Conflict between rule 62 and token MINUS resolved as shift (BITWISEXOR < MINUS).
    Conflict between rule 62 and token MOD resolved as shift (BITWISEXOR < MOD).
    Conflict between rule 62 and token NE resolved as shift (BITWISEXOR < NE).
    Conflict between rule 62 and token OR resolved as reduce (OR < BITWISEXOR).
    Conflict between rule 62 and token PLUS resolved as shift (BITWISEXOR < PLUS).


State 105

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   59     | Expr AND Expr •  [AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    BITWISEAND  shift, and go to state 62
    BITWISEOR   shift, and go to state 63
    BITWISEXOR  shift, and go to state 64
    MUL         shift, and go to state 67
    DIV         shift, and go to state 68
    EQ          shift, and go to state 69
    GE          shift, and go to state 70
    GT          shift, and go to state 71
    LE          shift, and go to state 72
    LT          shift, and go to state 73
    MINUS       shift, and go to state 74
    MOD         shift, and go to state 75
    NE          shift, and go to state 76
    PLUS        shift, and go to state 78

    $default  reduce using rule 59 (Expr)

    Conflict between rule 59 and token BITWISEAND resolved as shift (AND < BITWISEAND).
    Conflict between rule 59 and token BITWISEOR resolved as shift (AND < BITWISEOR).
    Conflict between rule 59 and token BITWISEXOR resolved as shift (AND < BITWISEXOR).
    Conflict between rule 59 and token AND resolved as reduce (%left AND).
    Conflict between rule 59 and token ASSIGN resolved as reduce (ASSIGN < AND).
    Conflict between rule 59 and token MUL resolved as shift (AND < MUL).
    Conflict between rule 59 and token DIV resolved as shift (AND < DIV).
    Conflict between rule 59 and token EQ resolved as shift (AND < EQ).
    Conflict between rule 59 and token GE resolved as shift (AND < GE).
    Conflict between rule 59 and token GT resolved as shift (AND < GT).
    Conflict between rule 59 and token LE resolved as shift (AND < LE).
    Conflict between rule 59 and token LT resolved as shift (AND < LT).
    Conflict between rule 59 and token MINUS resolved as shift (AND < MINUS).
    Conflict between rule 59 and token MOD resolved as shift (AND < MOD).
    Conflict between rule 59 and token NE resolved as shift (AND < NE).
    Conflict between rule 59 and token OR resolved as reduce (OR < AND).
    Conflict between rule 59 and token PLUS resolved as shift (AND < PLUS).


State 106

   52 Expr: Expr • ASSIGN Expr
   52     | Expr ASSIGN Expr •  [COMMA, RPAR, SEMI]
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    BITWISEAND  shift, and go to state 62
    BITWISEOR   shift, and go to state 63
    BITWISEXOR  shift, and go to state 64
    AND         shift, and go to state 65
    ASSIGN      shift, and go to state 66
    MUL         shift, and go to state 67
    DIV         shift, and go to state 68
    EQ          shift, and go to state 69
    GE          shift, and go to state 70
    GT          shift, and go to state 71
    LE          shift, and go to state 72
    LT          shift, and go to state 73
    MINUS       shift, and go to state 74
    MOD         shift, and go to state 75
    NE          shift, and go to state 76
    OR          shift, and go to state 77
    PLUS        shift, and go to state 78

    $default  reduce using rule 52 (Expr)

    Conflict between rule 52 and token BITWISEAND resolved as shift (ASSIGN < BITWISEAND).
    Conflict between rule 52 and token BITWISEOR resolved as shift (ASSIGN < BITWISEOR).
    Conflict between rule 52 and token BITWISEXOR resolved as shift (ASSIGN < BITWISEXOR).
    Conflict between rule 52 and token AND resolved as shift (ASSIGN < AND).
    Conflict between rule 52 and token ASSIGN resolved as shift (%right ASSIGN).
    Conflict between rule 52 and token MUL resolved as shift (ASSIGN < MUL).
    Conflict between rule 52 and token DIV resolved as shift (ASSIGN < DIV).
    Conflict between rule 52 and token EQ resolved as shift (ASSIGN < EQ).
    Conflict between rule 52 and token GE resolved as shift (ASSIGN < GE).
    Conflict between rule 52 and token GT resolved as shift (ASSIGN < GT).
    Conflict between rule 52 and token LE resolved as shift (ASSIGN < LE).
    Conflict between rule 52 and token LT resolved as shift (ASSIGN < LT).
    Conflict between rule 52 and token MINUS resolved as shift (ASSIGN < MINUS).
    Conflict between rule 52 and token MOD resolved as shift (ASSIGN < MOD).
    Conflict between rule 52 and token NE resolved as shift (ASSIGN < NE).
    Conflict between rule 52 and token OR resolved as shift (ASSIGN < OR).
    Conflict between rule 52 and token PLUS resolved as shift (ASSIGN < PLUS).


State 107

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   55     | Expr MUL Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    $default  reduce using rule 55 (Expr)

    Conflict between rule 55 and token BITWISEAND resolved as reduce (BITWISEAND < MUL).
    Conflict between rule 55 and token BITWISEOR resolved as reduce (BITWISEOR < MUL).
    Conflict between rule 55 and token BITWISEXOR resolved as reduce (BITWISEXOR < MUL).
    Conflict between rule 55 and token AND resolved as reduce (AND < MUL).
    Conflict between rule 55 and token ASSIGN resolved as reduce (ASSIGN < MUL).
    Conflict between rule 55 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 55 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 55 and token EQ resolved as reduce (EQ < MUL).
    Conflict between rule 55 and token GE resolved as reduce (GE < MUL).
    Conflict between rule 55 and token GT resolved as reduce (GT < MUL).
    Conflict between rule 55 and token LE resolved as reduce (LE < MUL).
    Conflict between rule 55 and token LT resolved as reduce (LT < MUL).
    Conflict between rule 55 and token MINUS resolved as reduce (MINUS < MUL).
    Conflict between rule 55 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 55 and token NE resolved as reduce (NE < MUL).
    Conflict between rule 55 and token OR resolved as reduce (OR < MUL).
    Conflict between rule 55 and token PLUS resolved as reduce (PLUS < MUL).


State 108

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   56     | Expr DIV Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    $default  reduce using rule 56 (Expr)

    Conflict between rule 56 and token BITWISEAND resolved as reduce (BITWISEAND < DIV).
    Conflict between rule 56 and token BITWISEOR resolved as reduce (BITWISEOR < DIV).
    Conflict between rule 56 and token BITWISEXOR resolved as reduce (BITWISEXOR < DIV).
    Conflict between rule 56 and token AND resolved as reduce (AND < DIV).
    Conflict between rule 56 and token ASSIGN resolved as reduce (ASSIGN < DIV).
    Conflict between rule 56 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 56 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 56 and token EQ resolved as reduce (EQ < DIV).
    Conflict between rule 56 and token GE resolved as reduce (GE < DIV).
    Conflict between rule 56 and token GT resolved as reduce (GT < DIV).
    Conflict between rule 56 and token LE resolved as reduce (LE < DIV).
    Conflict between rule 56 and token LT resolved as reduce (LT < DIV).
    Conflict between rule 56 and token MINUS resolved as reduce (MINUS < DIV).
    Conflict between rule 56 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 56 and token NE resolved as reduce (NE < DIV).
    Conflict between rule 56 and token OR resolved as reduce (OR < DIV).
    Conflict between rule 56 and token PLUS resolved as reduce (PLUS < DIV).


State 109

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   63     | Expr EQ Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, NE, OR, RPAR, SEMI]
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    GE     shift, and go to state 70
    GT     shift, and go to state 71
    LE     shift, and go to state 72
    LT     shift, and go to state 73
    MINUS  shift, and go to state 74
    MOD    shift, and go to state 75
    PLUS   shift, and go to state 78

    $default  reduce using rule 63 (Expr)

    Conflict between rule 63 and token BITWISEAND resolved as reduce (BITWISEAND < EQ).
    Conflict between rule 63 and token BITWISEOR resolved as reduce (BITWISEOR < EQ).
    Conflict between rule 63 and token BITWISEXOR resolved as reduce (BITWISEXOR < EQ).
    Conflict between rule 63 and token AND resolved as reduce (AND < EQ).
    Conflict between rule 63 and token ASSIGN resolved as reduce (ASSIGN < EQ).
    Conflict between rule 63 and token MUL resolved as shift (EQ < MUL).
    Conflict between rule 63 and token DIV resolved as shift (EQ < DIV).
    Conflict between rule 63 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 63 and token GE resolved as shift (EQ < GE).
    Conflict between rule 63 and token GT resolved as shift (EQ < GT).
    Conflict between rule 63 and token LE resolved as shift (EQ < LE).
    Conflict between rule 63 and token LT resolved as shift (EQ < LT).
    Conflict between rule 63 and token MINUS resolved as shift (EQ < MINUS).
    Conflict between rule 63 and token MOD resolved as shift (EQ < MOD).
    Conflict between rule 63 and token NE resolved as reduce (%left NE).
    Conflict between rule 63 and token OR resolved as reduce (OR < EQ).
    Conflict between rule 63 and token PLUS resolved as shift (EQ < PLUS).


State 110

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   66     | Expr GE Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    MINUS  shift, and go to state 74
    MOD    shift, and go to state 75
    PLUS   shift, and go to state 78

    $default  reduce using rule 66 (Expr)

    Conflict between rule 66 and token BITWISEAND resolved as reduce (BITWISEAND < GE).
    Conflict between rule 66 and token BITWISEOR resolved as reduce (BITWISEOR < GE).
    Conflict between rule 66 and token BITWISEXOR resolved as reduce (BITWISEXOR < GE).
    Conflict between rule 66 and token AND resolved as reduce (AND < GE).
    Conflict between rule 66 and token ASSIGN resolved as reduce (ASSIGN < GE).
    Conflict between rule 66 and token MUL resolved as shift (GE < MUL).
    Conflict between rule 66 and token DIV resolved as shift (GE < DIV).
    Conflict between rule 66 and token EQ resolved as reduce (EQ < GE).
    Conflict between rule 66 and token GE resolved as reduce (%left GE).
    Conflict between rule 66 and token GT resolved as reduce (%left GT).
    Conflict between rule 66 and token LE resolved as reduce (%left LE).
    Conflict between rule 66 and token LT resolved as reduce (%left LT).
    Conflict between rule 66 and token MINUS resolved as shift (GE < MINUS).
    Conflict between rule 66 and token MOD resolved as shift (GE < MOD).
    Conflict between rule 66 and token NE resolved as reduce (NE < GE).
    Conflict between rule 66 and token OR resolved as reduce (OR < GE).
    Conflict between rule 66 and token PLUS resolved as shift (GE < PLUS).


State 111

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr
   68     | Expr GT Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]

    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    MINUS  shift, and go to state 74
    MOD    shift, and go to state 75
    PLUS   shift, and go to state 78

    $default  reduce using rule 68 (Expr)

    Conflict between rule 68 and token BITWISEAND resolved as reduce (BITWISEAND < GT).
    Conflict between rule 68 and token BITWISEOR resolved as reduce (BITWISEOR < GT).
    Conflict between rule 68 and token BITWISEXOR resolved as reduce (BITWISEXOR < GT).
    Conflict between rule 68 and token AND resolved as reduce (AND < GT).
    Conflict between rule 68 and token ASSIGN resolved as reduce (ASSIGN < GT).
    Conflict between rule 68 and token MUL resolved as shift (GT < MUL).
    Conflict between rule 68 and token DIV resolved as shift (GT < DIV).
    Conflict between rule 68 and token EQ resolved as reduce (EQ < GT).
    Conflict between rule 68 and token GE resolved as reduce (%left GE).
    Conflict between rule 68 and token GT resolved as reduce (%left GT).
    Conflict between rule 68 and token LE resolved as reduce (%left LE).
    Conflict between rule 68 and token LT resolved as reduce (%left LT).
    Conflict between rule 68 and token MINUS resolved as shift (GT < MINUS).
    Conflict between rule 68 and token MOD resolved as shift (GT < MOD).
    Conflict between rule 68 and token NE resolved as reduce (NE < GT).
    Conflict between rule 68 and token OR resolved as reduce (OR < GT).
    Conflict between rule 68 and token PLUS resolved as shift (GT < PLUS).


State 112

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   65     | Expr LE Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    MINUS  shift, and go to state 74
    MOD    shift, and go to state 75
    PLUS   shift, and go to state 78

    $default  reduce using rule 65 (Expr)

    Conflict between rule 65 and token BITWISEAND resolved as reduce (BITWISEAND < LE).
    Conflict between rule 65 and token BITWISEOR resolved as reduce (BITWISEOR < LE).
    Conflict between rule 65 and token BITWISEXOR resolved as reduce (BITWISEXOR < LE).
    Conflict between rule 65 and token AND resolved as reduce (AND < LE).
    Conflict between rule 65 and token ASSIGN resolved as reduce (ASSIGN < LE).
    Conflict between rule 65 and token MUL resolved as shift (LE < MUL).
    Conflict between rule 65 and token DIV resolved as shift (LE < DIV).
    Conflict between rule 65 and token EQ resolved as reduce (EQ < LE).
    Conflict between rule 65 and token GE resolved as reduce (%left GE).
    Conflict between rule 65 and token GT resolved as reduce (%left GT).
    Conflict between rule 65 and token LE resolved as reduce (%left LE).
    Conflict between rule 65 and token LT resolved as reduce (%left LT).
    Conflict between rule 65 and token MINUS resolved as shift (LE < MINUS).
    Conflict between rule 65 and token MOD resolved as shift (LE < MOD).
    Conflict between rule 65 and token NE resolved as reduce (NE < LE).
    Conflict between rule 65 and token OR resolved as reduce (OR < LE).
    Conflict between rule 65 and token PLUS resolved as shift (LE < PLUS).


State 113

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   67     | Expr LT Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]
   68     | Expr • GT Expr

    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    MINUS  shift, and go to state 74
    MOD    shift, and go to state 75
    PLUS   shift, and go to state 78

    $default  reduce using rule 67 (Expr)

    Conflict between rule 67 and token BITWISEAND resolved as reduce (BITWISEAND < LT).
    Conflict between rule 67 and token BITWISEOR resolved as reduce (BITWISEOR < LT).
    Conflict between rule 67 and token BITWISEXOR resolved as reduce (BITWISEXOR < LT).
    Conflict between rule 67 and token AND resolved as reduce (AND < LT).
    Conflict between rule 67 and token ASSIGN resolved as reduce (ASSIGN < LT).
    Conflict between rule 67 and token MUL resolved as shift (LT < MUL).
    Conflict between rule 67 and token DIV resolved as shift (LT < DIV).
    Conflict between rule 67 and token EQ resolved as reduce (EQ < LT).
    Conflict between rule 67 and token GE resolved as reduce (%left GE).
    Conflict between rule 67 and token GT resolved as reduce (%left GT).
    Conflict between rule 67 and token LE resolved as reduce (%left LE).
    Conflict between rule 67 and token LT resolved as reduce (%left LT).
    Conflict between rule 67 and token MINUS resolved as shift (LT < MINUS).
    Conflict between rule 67 and token MOD resolved as shift (LT < MOD).
    Conflict between rule 67 and token NE resolved as reduce (NE < LT).
    Conflict between rule 67 and token OR resolved as reduce (OR < LT).
    Conflict between rule 67 and token PLUS resolved as shift (LT < PLUS).


State 114

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   54     | Expr MINUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, MINUS, NE, OR, PLUS, RPAR, SEMI]
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    MUL  shift, and go to state 67
    DIV  shift, and go to state 68
    MOD  shift, and go to state 75

    $default  reduce using rule 54 (Expr)

    Conflict between rule 54 and token BITWISEAND resolved as reduce (BITWISEAND < MINUS).
    Conflict between rule 54 and token BITWISEOR resolved as reduce (BITWISEOR < MINUS).
    Conflict between rule 54 and token BITWISEXOR resolved as reduce (BITWISEXOR < MINUS).
    Conflict between rule 54 and token AND resolved as reduce (AND < MINUS).
    Conflict between rule 54 and token ASSIGN resolved as reduce (ASSIGN < MINUS).
    Conflict between rule 54 and token MUL resolved as shift (MINUS < MUL).
    Conflict between rule 54 and token DIV resolved as shift (MINUS < DIV).
    Conflict between rule 54 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 54 and token GE resolved as reduce (GE < MINUS).
    Conflict between rule 54 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 54 and token LE resolved as reduce (LE < MINUS).
    Conflict between rule 54 and token LT resolved as reduce (LT < MINUS).
    Conflict between rule 54 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 54 and token MOD resolved as shift (MINUS < MOD).
    Conflict between rule 54 and token NE resolved as reduce (NE < MINUS).
    Conflict between rule 54 and token OR resolved as reduce (OR < MINUS).
    Conflict between rule 54 and token PLUS resolved as reduce (%left PLUS).


State 115

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   57     | Expr MOD Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    $default  reduce using rule 57 (Expr)

    Conflict between rule 57 and token BITWISEAND resolved as reduce (BITWISEAND < MOD).
    Conflict between rule 57 and token BITWISEOR resolved as reduce (BITWISEOR < MOD).
    Conflict between rule 57 and token BITWISEXOR resolved as reduce (BITWISEXOR < MOD).
    Conflict between rule 57 and token AND resolved as reduce (AND < MOD).
    Conflict between rule 57 and token ASSIGN resolved as reduce (ASSIGN < MOD).
    Conflict between rule 57 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 57 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 57 and token EQ resolved as reduce (EQ < MOD).
    Conflict between rule 57 and token GE resolved as reduce (GE < MOD).
    Conflict between rule 57 and token GT resolved as reduce (GT < MOD).
    Conflict between rule 57 and token LE resolved as reduce (LE < MOD).
    Conflict between rule 57 and token LT resolved as reduce (LT < MOD).
    Conflict between rule 57 and token MINUS resolved as reduce (MINUS < MOD).
    Conflict between rule 57 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 57 and token NE resolved as reduce (NE < MOD).
    Conflict between rule 57 and token OR resolved as reduce (OR < MOD).
    Conflict between rule 57 and token PLUS resolved as reduce (PLUS < MOD).


State 116

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   64     | Expr NE Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, NE, OR, RPAR, SEMI]
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    MUL    shift, and go to state 67
    DIV    shift, and go to state 68
    GE     shift, and go to state 70
    GT     shift, and go to state 71
    LE     shift, and go to state 72
    LT     shift, and go to state 73
    MINUS  shift, and go to state 74
    MOD    shift, and go to state 75
    PLUS   shift, and go to state 78

    $default  reduce using rule 64 (Expr)

    Conflict between rule 64 and token BITWISEAND resolved as reduce (BITWISEAND < NE).
    Conflict between rule 64 and token BITWISEOR resolved as reduce (BITWISEOR < NE).
    Conflict between rule 64 and token BITWISEXOR resolved as reduce (BITWISEXOR < NE).
    Conflict between rule 64 and token AND resolved as reduce (AND < NE).
    Conflict between rule 64 and token ASSIGN resolved as reduce (ASSIGN < NE).
    Conflict between rule 64 and token MUL resolved as shift (NE < MUL).
    Conflict between rule 64 and token DIV resolved as shift (NE < DIV).
    Conflict between rule 64 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 64 and token GE resolved as shift (NE < GE).
    Conflict between rule 64 and token GT resolved as shift (NE < GT).
    Conflict between rule 64 and token LE resolved as shift (NE < LE).
    Conflict between rule 64 and token LT resolved as shift (NE < LT).
    Conflict between rule 64 and token MINUS resolved as shift (NE < MINUS).
    Conflict between rule 64 and token MOD resolved as shift (NE < MOD).
    Conflict between rule 64 and token NE resolved as reduce (%left NE).
    Conflict between rule 64 and token OR resolved as reduce (OR < NE).
    Conflict between rule 64 and token PLUS resolved as shift (NE < PLUS).


State 117

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   58     | Expr OR Expr •  [ASSIGN, COMMA, OR, RPAR, SEMI]
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    BITWISEAND  shift, and go to state 62
    BITWISEOR   shift, and go to state 63
    BITWISEXOR  shift, and go to state 64
    AND         shift, and go to state 65
    MUL         shift, and go to state 67
    DIV         shift, and go to state 68
    EQ          shift, and go to state 69
    GE          shift, and go to state 70
    GT          shift, and go to state 71
    LE          shift, and go to state 72
    LT          shift, and go to state 73
    MINUS       shift, and go to state 74
    MOD         shift, and go to state 75
    NE          shift, and go to state 76
    PLUS        shift, and go to state 78

    $default  reduce using rule 58 (Expr)

    Conflict between rule 58 and token BITWISEAND resolved as shift (OR < BITWISEAND).
    Conflict between rule 58 and token BITWISEOR resolved as shift (OR < BITWISEOR).
    Conflict between rule 58 and token BITWISEXOR resolved as shift (OR < BITWISEXOR).
    Conflict between rule 58 and token AND resolved as shift (OR < AND).
    Conflict between rule 58 and token ASSIGN resolved as reduce (ASSIGN < OR).
    Conflict between rule 58 and token MUL resolved as shift (OR < MUL).
    Conflict between rule 58 and token DIV resolved as shift (OR < DIV).
    Conflict between rule 58 and token EQ resolved as shift (OR < EQ).
    Conflict between rule 58 and token GE resolved as shift (OR < GE).
    Conflict between rule 58 and token GT resolved as shift (OR < GT).
    Conflict between rule 58 and token LE resolved as shift (OR < LE).
    Conflict between rule 58 and token LT resolved as shift (OR < LT).
    Conflict between rule 58 and token MINUS resolved as shift (OR < MINUS).
    Conflict between rule 58 and token MOD resolved as shift (OR < MOD).
    Conflict between rule 58 and token NE resolved as shift (OR < NE).
    Conflict between rule 58 and token OR resolved as reduce (%left OR).
    Conflict between rule 58 and token PLUS resolved as shift (OR < PLUS).


State 118

   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   53     | Expr PLUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, MINUS, NE, OR, PLUS, RPAR, SEMI]
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    MUL  shift, and go to state 67
    DIV  shift, and go to state 68
    MOD  shift, and go to state 75

    $default  reduce using rule 53 (Expr)

    Conflict between rule 53 and token BITWISEAND resolved as reduce (BITWISEAND < PLUS).
    Conflict between rule 53 and token BITWISEOR resolved as reduce (BITWISEOR < PLUS).
    Conflict between rule 53 and token BITWISEXOR resolved as reduce (BITWISEXOR < PLUS).
    Conflict between rule 53 and token AND resolved as reduce (AND < PLUS).
    Conflict between rule 53 and token ASSIGN resolved as reduce (ASSIGN < PLUS).
    Conflict between rule 53 and token MUL resolved as shift (PLUS < MUL).
    Conflict between rule 53 and token DIV resolved as shift (PLUS < DIV).
    Conflict between rule 53 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 53 and token GE resolved as reduce (GE < PLUS).
    Conflict between rule 53 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 53 and token LE resolved as reduce (LE < PLUS).
    Conflict between rule 53 and token LT resolved as reduce (LT < PLUS).
    Conflict between rule 53 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 53 and token MOD resolved as shift (PLUS < MOD).
    Conflict between rule 53 and token NE resolved as reduce (NE < PLUS).
    Conflict between rule 53 and token OR resolved as reduce (OR < PLUS).
    Conflict between rule 53 and token PLUS resolved as reduce (%left PLUS).


State 119

   18 ParameterList: ParameterList COMMA ParameterDeclaration •

    $default  reduce using rule 18 (ParameterList)


State 120

   38 Statement: LBRACE error RBRACE •

    $default  reduce using rule 38 (Statement)


State 121

   32 Statement_error: error SEMI •

    $default  reduce using rule 32 (Statement_error)


State 122

   32 Statement_error: error • SEMI

    SEMI  shift, and go to state 121


State 123

   36 Statement: LBRACE AuxStatement RBRACE •

    $default  reduce using rule 36 (Statement)


State 124

   34 AuxStatement: AuxStatement Statement_error •

    $default  reduce using rule 34 (AuxStatement)


State 125

   43 Statement: WHILE LPAR Expr_comma • RPAR Statement_error
   48 Expr_comma: Expr_comma • COMMA Expr

    COMMA  shift, and go to state 61
    RPAR   shift, and go to state 131


State 126

   41 Statement: IF LPAR Expr_comma • RPAR Statement_error ELSE Statement_error
   42          | IF LPAR Expr_comma • RPAR Statement_error
   48 Expr_comma: Expr_comma • COMMA Expr

    COMMA  shift, and go to state 61
    RPAR   shift, and go to state 132


State 127

   44 Statement: RETURN Expr_comma SEMI •

    $default  reduce using rule 44 (Statement)


State 128

   50 Expr: IDENTIFIER LPAR error RPAR •

    $default  reduce using rule 50 (Expr)


State 129

   46 Expr_call: Expr_call COMMA • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Expr  go to state 133


State 130

   73 Expr: IDENTIFIER LPAR Expr_call RPAR •

    $default  reduce using rule 73 (Expr)


State 131

   32 Statement_error: • error SEMI
   33                | • Statement
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   43          | WHILE LPAR Expr_comma RPAR • Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    error       shift, and go to state 122
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    SEMI        shift, and go to state 44
    WHILE       shift, and go to state 45
    IF          shift, and go to state 46
    RETURN      shift, and go to state 47
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Statement_error  go to state 134
    Statement        go to state 86
    Expr_comma       go to state 52
    Expr             go to state 38


State 132

   32 Statement_error: • error SEMI
   33                | • Statement
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   41          | IF LPAR Expr_comma RPAR • Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   42          | IF LPAR Expr_comma RPAR • Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    error       shift, and go to state 122
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    SEMI        shift, and go to state 44
    WHILE       shift, and go to state 45
    IF          shift, and go to state 46
    RETURN      shift, and go to state 47
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Statement_error  go to state 135
    Statement        go to state 86
    Expr_comma       go to state 52
    Expr             go to state 38


State 133

   46 Expr_call: Expr_call COMMA Expr •  [COMMA, RPAR]
   52 Expr: Expr • ASSIGN Expr
   53     | Expr • PLUS Expr
   54     | Expr • MINUS Expr
   55     | Expr • MUL Expr
   56     | Expr • DIV Expr
   57     | Expr • MOD Expr
   58     | Expr • OR Expr
   59     | Expr • AND Expr
   60     | Expr • BITWISEAND Expr
   61     | Expr • BITWISEOR Expr
   62     | Expr • BITWISEXOR Expr
   63     | Expr • EQ Expr
   64     | Expr • NE Expr
   65     | Expr • LE Expr
   66     | Expr • GE Expr
   67     | Expr • LT Expr
   68     | Expr • GT Expr

    BITWISEAND  shift, and go to state 62
    BITWISEOR   shift, and go to state 63
    BITWISEXOR  shift, and go to state 64
    AND         shift, and go to state 65
    ASSIGN      shift, and go to state 66
    MUL         shift, and go to state 67
    DIV         shift, and go to state 68
    EQ          shift, and go to state 69
    GE          shift, and go to state 70
    GT          shift, and go to state 71
    LE          shift, and go to state 72
    LT          shift, and go to state 73
    MINUS       shift, and go to state 74
    MOD         shift, and go to state 75
    NE          shift, and go to state 76
    OR          shift, and go to state 77
    PLUS        shift, and go to state 78

    $default  reduce using rule 46 (Expr_call)


State 134

   43 Statement: WHILE LPAR Expr_comma RPAR Statement_error •

    $default  reduce using rule 43 (Statement)


State 135

   41 Statement: IF LPAR Expr_comma RPAR Statement_error • ELSE Statement_error
   42          | IF LPAR Expr_comma RPAR Statement_error •  [error, LBRACE, LPAR, MINUS, NOT, PLUS, RBRACE, SEMI, CHR, WHILE, IF, INT, SHORT, DOUBLE, RETURN, VOID, IDENTIFIER, DECIMAL, NATURAL, CHRLIT]

    ELSE  shift, and go to state 136

    $default  reduce using rule 42 (Statement)

    Conflict between rule 42 and token ELSE resolved as shift (%right ELSE).


State 136

   32 Statement_error: • error SEMI
   33                | • Statement
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   41          | IF LPAR Expr_comma RPAR Statement_error ELSE • Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   48 Expr_comma: • Expr_comma COMMA Expr
   49           | • Expr
   50 Expr: • IDENTIFIER LPAR error RPAR
   51     | • LPAR error RPAR
   52     | • Expr ASSIGN Expr
   53     | • Expr PLUS Expr
   54     | • Expr MINUS Expr
   55     | • Expr MUL Expr
   56     | • Expr DIV Expr
   57     | • Expr MOD Expr
   58     | • Expr OR Expr
   59     | • Expr AND Expr
   60     | • Expr BITWISEAND Expr
   61     | • Expr BITWISEOR Expr
   62     | • Expr BITWISEXOR Expr
   63     | • Expr EQ Expr
   64     | • Expr NE Expr
   65     | • Expr LE Expr
   66     | • Expr GE Expr
   67     | • Expr LT Expr
   68     | • Expr GT Expr
   69     | • PLUS Expr
   70     | • MINUS Expr
   71     | • NOT Expr
   72     | • IDENTIFIER LPAR RPAR
   73     | • IDENTIFIER LPAR Expr_call RPAR
   74     | • IDENTIFIER
   75     | • NATURAL
   76     | • CHRLIT
   77     | • DECIMAL
   78     | • LPAR Expr_comma RPAR

    error       shift, and go to state 122
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 29
    MINUS       shift, and go to state 30
    NOT         shift, and go to state 31
    PLUS        shift, and go to state 32
    SEMI        shift, and go to state 44
    WHILE       shift, and go to state 45
    IF          shift, and go to state 46
    RETURN      shift, and go to state 47
    IDENTIFIER  shift, and go to state 33
    DECIMAL     shift, and go to state 34
    NATURAL     shift, and go to state 35
    CHRLIT      shift, and go to state 36

    Statement_error  go to state 137
    Statement        go to state 86
    Expr_comma       go to state 52
    Expr             go to state 38


State 137

   41 Statement: IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error •

    $default  reduce using rule 41 (Statement)
