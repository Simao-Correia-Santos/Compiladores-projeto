Terminals unused in grammar

    RESERVED


Grammar

    0 $accept: Program $end

    1 Program: FunctionsAndDeclarations

    2 FunctionsAndDeclarations: FunctionsAndDeclarations FunctionDefinition
    3                         | FunctionsAndDeclarations FunctionDeclaration
    4                         | FunctionsAndDeclarations Declaration
    5                         | FunctionDefinition
    6                         | FunctionDeclaration
    7                         | Declaration

    8 FunctionDefinition: TypeSpec FunctionDeclarator FunctionBody

    9 FunctionBody: LBRACE DeclarationAndStatements RBRACE
   10             | LBRACE RBRACE

   11 DeclarationAndStatements: Statement DeclarationAndStatements
   12                         | Declaration DeclarationAndStatements
   13                         | Statement
   14                         | Declaration

   15 FunctionDeclaration: TypeSpec FunctionDeclarator SEMI

   16 FunctionDeclarator: IDENTIFIER LPAR ParameterList RPAR

   17 ParameterList: ParameterDeclaration
   18              | ParameterList COMMA ParameterDeclaration

   19 ParameterDeclaration: TypeSpec IDENTIFIER
   20                     | TypeSpec

   21 Declaration: TypeSpec Declarator AuxDeclaration SEMI
   22            | error SEMI

   23 AuxDeclaration: AuxDeclaration COMMA Declarator
   24               | ε

   25 TypeSpec: CHR
   26         | INT
   27         | VOID
   28         | SHORT
   29         | DOUBLE

   30 Declarator: IDENTIFIER ASSIGN Expr_comma
   31           | IDENTIFIER

   32 Statement_error: error SEMI
   33                | Statement

   34 AuxStatement: AuxStatement Statement_error
   35             | Statement_error

   36 Statement: LBRACE AuxStatement RBRACE
   37          | SEMI
   38          | LBRACE error RBRACE
   39          | LBRACE RBRACE
   40          | Expr_comma SEMI
   41          | IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | IF LPAR Expr_comma RPAR Statement_error
   43          | WHILE LPAR Expr_comma RPAR Statement_error
   44          | RETURN Expr_comma SEMI
   45          | RETURN SEMI

   46 Expr_comma: Expr_comma COMMA Expr
   47           | Expr

   48 Expr: IDENTIFIER LPAR error RPAR
   49     | LPAR error RPAR
   50     | Expr ASSIGN Expr
   51     | Expr PLUS Expr
   52     | Expr MINUS Expr
   53     | Expr MUL Expr
   54     | Expr DIV Expr
   55     | Expr MOD Expr
   56     | Expr OR Expr
   57     | Expr AND Expr
   58     | Expr BITWISEAND Expr
   59     | Expr BITWISEOR Expr
   60     | Expr BITWISEXOR Expr
   61     | Expr EQ Expr
   62     | Expr NE Expr
   63     | Expr LE Expr
   64     | Expr GE Expr
   65     | Expr LT Expr
   66     | Expr GT Expr
   67     | PLUS Expr
   68     | MINUS Expr
   69     | NOT Expr
   70     | IDENTIFIER LPAR RPAR
   71     | IDENTIFIER LPAR Expr_comma RPAR
   72     | IDENTIFIER
   73     | NATURAL
   74     | CHRLIT
   75     | DECIMAL
   76     | LPAR Expr_comma RPAR


Terminals, with rules where they appear

    $end (0) 0
    error (256) 22 32 38 48 49
    BITWISEAND (258) 58
    BITWISEOR (259) 59
    BITWISEXOR (260) 60
    AND (261) 57
    ASSIGN (262) 30 50
    MUL (263) 53
    COMMA (264) 18 23 46
    DIV (265) 54
    EQ (266) 61
    GE (267) 64
    GT (268) 66
    LBRACE (269) 9 10 36 38 39
    LE (270) 63
    LPAR (271) 16 41 42 43 48 49 70 71 76
    LT (272) 65
    MINUS (273) 52 68
    MOD (274) 55
    NE (275) 62
    NOT (276) 69
    OR (277) 56
    PLUS (278) 51 67
    RBRACE (279) 9 10 36 38 39
    RPAR (280) 16 41 42 43 48 49 70 71 76
    SEMI (281) 15 21 22 32 37 40 44 45
    CHR (282) 25
    ELSE (283) 41
    WHILE (284) 43
    IF (285) 41 42
    INT (286) 26
    SHORT (287) 28
    DOUBLE (288) 29
    RETURN (289) 44 45
    VOID (290) 27
    IDENTIFIER <lexeme> (291) 16 19 30 31 48 70 71 72
    DECIMAL <lexeme> (292) 75
    NATURAL <lexeme> (293) 73
    CHRLIT <lexeme> (294) 74
    RESERVED <lexeme> (295)


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    Program <node> (42)
        on left: 1
        on right: 0
    FunctionsAndDeclarations <node> (43)
        on left: 2 3 4 5 6 7
        on right: 1 2 3 4
    FunctionDefinition <node> (44)
        on left: 8
        on right: 2 5
    FunctionBody <node> (45)
        on left: 9 10
        on right: 8
    DeclarationAndStatements <node> (46)
        on left: 11 12 13 14
        on right: 9 11 12
    FunctionDeclaration <node> (47)
        on left: 15
        on right: 3 6
    FunctionDeclarator <node> (48)
        on left: 16
        on right: 8 15
    ParameterList <node> (49)
        on left: 17 18
        on right: 16 18
    ParameterDeclaration <node> (50)
        on left: 19 20
        on right: 17 18
    Declaration <node> (51)
        on left: 21 22
        on right: 4 7 12 14
    AuxDeclaration <node> (52)
        on left: 23 24
        on right: 21 23
    TypeSpec <node> (53)
        on left: 25 26 27 28 29
        on right: 8 15 19 20 21
    Declarator <node> (54)
        on left: 30 31
        on right: 21 23
    Statement_error <node> (55)
        on left: 32 33
        on right: 34 35 41 42 43
    AuxStatement <node> (56)
        on left: 34 35
        on right: 34 36
    Statement <node> (57)
        on left: 36 37 38 39 40 41 42 43 44 45
        on right: 11 13 33
    Expr_comma <node> (58)
        on left: 46 47
        on right: 30 40 41 42 43 44 46 71 76
    Expr <node> (59)
        on left: 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76
        on right: 46 47 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69


State 0

    0 $accept: • Program $end
    1 Program: • FunctionsAndDeclarations
    2 FunctionsAndDeclarations: • FunctionsAndDeclarations FunctionDefinition
    3                         | • FunctionsAndDeclarations FunctionDeclaration
    4                         | • FunctionsAndDeclarations Declaration
    5                         | • FunctionDefinition
    6                         | • FunctionDeclaration
    7                         | • Declaration
    8 FunctionDefinition: • TypeSpec FunctionDeclarator FunctionBody
   15 FunctionDeclaration: • TypeSpec FunctionDeclarator SEMI
   21 Declaration: • TypeSpec Declarator AuxDeclaration SEMI
   22            | • error SEMI
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    error   shift, and go to state 1
    CHR     shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    VOID    shift, and go to state 6

    Program                   go to state 7
    FunctionsAndDeclarations  go to state 8
    FunctionDefinition        go to state 9
    FunctionDeclaration       go to state 10
    Declaration               go to state 11
    TypeSpec                  go to state 12


State 1

   22 Declaration: error • SEMI

    SEMI  shift, and go to state 13


State 2

   25 TypeSpec: CHR •

    $default  reduce using rule 25 (TypeSpec)


State 3

   26 TypeSpec: INT •

    $default  reduce using rule 26 (TypeSpec)


State 4

   28 TypeSpec: SHORT •

    $default  reduce using rule 28 (TypeSpec)


State 5

   29 TypeSpec: DOUBLE •

    $default  reduce using rule 29 (TypeSpec)


State 6

   27 TypeSpec: VOID •

    $default  reduce using rule 27 (TypeSpec)


State 7

    0 $accept: Program • $end

    $end  shift, and go to state 14


State 8

    1 Program: FunctionsAndDeclarations •  [$end]
    2 FunctionsAndDeclarations: FunctionsAndDeclarations • FunctionDefinition
    3                         | FunctionsAndDeclarations • FunctionDeclaration
    4                         | FunctionsAndDeclarations • Declaration
    8 FunctionDefinition: • TypeSpec FunctionDeclarator FunctionBody
   15 FunctionDeclaration: • TypeSpec FunctionDeclarator SEMI
   21 Declaration: • TypeSpec Declarator AuxDeclaration SEMI
   22            | • error SEMI
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    error   shift, and go to state 1
    CHR     shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    VOID    shift, and go to state 6

    $end  reduce using rule 1 (Program)

    FunctionDefinition   go to state 15
    FunctionDeclaration  go to state 16
    Declaration          go to state 17
    TypeSpec             go to state 12


State 9

    5 FunctionsAndDeclarations: FunctionDefinition •

    $default  reduce using rule 5 (FunctionsAndDeclarations)


State 10

    6 FunctionsAndDeclarations: FunctionDeclaration •

    $default  reduce using rule 6 (FunctionsAndDeclarations)


State 11

    7 FunctionsAndDeclarations: Declaration •

    $default  reduce using rule 7 (FunctionsAndDeclarations)


State 12

    8 FunctionDefinition: TypeSpec • FunctionDeclarator FunctionBody
   15 FunctionDeclaration: TypeSpec • FunctionDeclarator SEMI
   16 FunctionDeclarator: • IDENTIFIER LPAR ParameterList RPAR
   21 Declaration: TypeSpec • Declarator AuxDeclaration SEMI
   30 Declarator: • IDENTIFIER ASSIGN Expr_comma
   31           | • IDENTIFIER

    IDENTIFIER  shift, and go to state 18

    FunctionDeclarator  go to state 19
    Declarator          go to state 20


State 13

   22 Declaration: error SEMI •

    $default  reduce using rule 22 (Declaration)


State 14

    0 $accept: Program $end •

    $default  accept


State 15

    2 FunctionsAndDeclarations: FunctionsAndDeclarations FunctionDefinition •

    $default  reduce using rule 2 (FunctionsAndDeclarations)


State 16

    3 FunctionsAndDeclarations: FunctionsAndDeclarations FunctionDeclaration •

    $default  reduce using rule 3 (FunctionsAndDeclarations)


State 17

    4 FunctionsAndDeclarations: FunctionsAndDeclarations Declaration •

    $default  reduce using rule 4 (FunctionsAndDeclarations)


State 18

   16 FunctionDeclarator: IDENTIFIER • LPAR ParameterList RPAR
   30 Declarator: IDENTIFIER • ASSIGN Expr_comma
   31           | IDENTIFIER •  [COMMA, SEMI]

    ASSIGN  shift, and go to state 21
    LPAR    shift, and go to state 22

    $default  reduce using rule 31 (Declarator)


State 19

    8 FunctionDefinition: TypeSpec FunctionDeclarator • FunctionBody
    9 FunctionBody: • LBRACE DeclarationAndStatements RBRACE
   10             | • LBRACE RBRACE
   15 FunctionDeclaration: TypeSpec FunctionDeclarator • SEMI

    LBRACE  shift, and go to state 23
    SEMI    shift, and go to state 24

    FunctionBody  go to state 25


State 20

   21 Declaration: TypeSpec Declarator • AuxDeclaration SEMI
   23 AuxDeclaration: • AuxDeclaration COMMA Declarator
   24               | ε •

    $default  reduce using rule 24 (AuxDeclaration)

    AuxDeclaration  go to state 26


State 21

   30 Declarator: IDENTIFIER ASSIGN • Expr_comma
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr_comma  go to state 35
    Expr        go to state 36


State 22

   16 FunctionDeclarator: IDENTIFIER LPAR • ParameterList RPAR
   17 ParameterList: • ParameterDeclaration
   18              | • ParameterList COMMA ParameterDeclaration
   19 ParameterDeclaration: • TypeSpec IDENTIFIER
   20                     | • TypeSpec
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHR     shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    VOID    shift, and go to state 6

    ParameterList         go to state 37
    ParameterDeclaration  go to state 38
    TypeSpec              go to state 39


State 23

    9 FunctionBody: LBRACE • DeclarationAndStatements RBRACE
   10             | LBRACE • RBRACE
   11 DeclarationAndStatements: • Statement DeclarationAndStatements
   12                         | • Declaration DeclarationAndStatements
   13                         | • Statement
   14                         | • Declaration
   21 Declaration: • TypeSpec Declarator AuxDeclaration SEMI
   22            | • error SEMI
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    error       shift, and go to state 1
    LBRACE      shift, and go to state 40
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    RBRACE      shift, and go to state 41
    SEMI        shift, and go to state 42
    CHR         shift, and go to state 2
    WHILE       shift, and go to state 43
    IF          shift, and go to state 44
    INT         shift, and go to state 3
    SHORT       shift, and go to state 4
    DOUBLE      shift, and go to state 5
    RETURN      shift, and go to state 45
    VOID        shift, and go to state 6
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    DeclarationAndStatements  go to state 46
    Declaration               go to state 47
    TypeSpec                  go to state 48
    Statement                 go to state 49
    Expr_comma                go to state 50
    Expr                      go to state 36


State 24

   15 FunctionDeclaration: TypeSpec FunctionDeclarator SEMI •

    $default  reduce using rule 15 (FunctionDeclaration)


State 25

    8 FunctionDefinition: TypeSpec FunctionDeclarator FunctionBody •

    $default  reduce using rule 8 (FunctionDefinition)


State 26

   21 Declaration: TypeSpec Declarator AuxDeclaration • SEMI
   23 AuxDeclaration: AuxDeclaration • COMMA Declarator

    COMMA  shift, and go to state 51
    SEMI   shift, and go to state 52


State 27

   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   49     | LPAR • error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR
   76     | LPAR • Expr_comma RPAR

    error       shift, and go to state 53
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr_comma  go to state 54
    Expr        go to state 36


State 28

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   68     | MINUS • Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 55


State 29

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   69     | NOT • Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 56


State 30

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   67     | PLUS • Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 57


State 31

   48 Expr: IDENTIFIER • LPAR error RPAR
   70     | IDENTIFIER • LPAR RPAR
   71     | IDENTIFIER • LPAR Expr_comma RPAR
   72     | IDENTIFIER •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]

    LPAR  shift, and go to state 58

    $default  reduce using rule 72 (Expr)


State 32

   75 Expr: DECIMAL •

    $default  reduce using rule 75 (Expr)


State 33

   73 Expr: NATURAL •

    $default  reduce using rule 73 (Expr)


State 34

   74 Expr: CHRLIT •

    $default  reduce using rule 74 (Expr)


State 35

   30 Declarator: IDENTIFIER ASSIGN Expr_comma •  [COMMA, SEMI]
   46 Expr_comma: Expr_comma • COMMA Expr

    $default  reduce using rule 30 (Declarator)

    Conflict between rule 30 and token COMMA resolved as reduce (COMMA < ASSIGN).


State 36

   47 Expr_comma: Expr •  [COMMA, RPAR, SEMI]
   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    BITWISEAND  shift, and go to state 60
    BITWISEOR   shift, and go to state 61
    BITWISEXOR  shift, and go to state 62
    AND         shift, and go to state 63
    ASSIGN      shift, and go to state 64
    MUL         shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76

    $default  reduce using rule 47 (Expr_comma)


State 37

   16 FunctionDeclarator: IDENTIFIER LPAR ParameterList • RPAR
   18 ParameterList: ParameterList • COMMA ParameterDeclaration

    COMMA  shift, and go to state 77
    RPAR   shift, and go to state 78


State 38

   17 ParameterList: ParameterDeclaration •

    $default  reduce using rule 17 (ParameterList)


State 39

   19 ParameterDeclaration: TypeSpec • IDENTIFIER
   20                     | TypeSpec •  [COMMA, RPAR]

    IDENTIFIER  shift, and go to state 79

    $default  reduce using rule 20 (ParameterDeclaration)


State 40

   32 Statement_error: • error SEMI
   33                | • Statement
   34 AuxStatement: • AuxStatement Statement_error
   35             | • Statement_error
   36 Statement: • LBRACE AuxStatement RBRACE
   36          | LBRACE • AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   38          | LBRACE • error RBRACE
   39          | • LBRACE RBRACE
   39          | LBRACE • RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    error       shift, and go to state 80
    LBRACE      shift, and go to state 40
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    RBRACE      shift, and go to state 81
    SEMI        shift, and go to state 42
    WHILE       shift, and go to state 43
    IF          shift, and go to state 44
    RETURN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement_error  go to state 82
    AuxStatement     go to state 83
    Statement        go to state 84
    Expr_comma       go to state 50
    Expr             go to state 36


State 41

   10 FunctionBody: LBRACE RBRACE •

    $default  reduce using rule 10 (FunctionBody)


State 42

   37 Statement: SEMI •

    $default  reduce using rule 37 (Statement)


State 43

   43 Statement: WHILE • LPAR Expr_comma RPAR Statement_error

    LPAR  shift, and go to state 85


State 44

   41 Statement: IF • LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | IF • LPAR Expr_comma RPAR Statement_error

    LPAR  shift, and go to state 86


State 45

   44 Statement: RETURN • Expr_comma SEMI
   45          | RETURN • SEMI
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 87
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr_comma  go to state 88
    Expr        go to state 36


State 46

    9 FunctionBody: LBRACE DeclarationAndStatements • RBRACE

    RBRACE  shift, and go to state 89


State 47

   11 DeclarationAndStatements: • Statement DeclarationAndStatements
   12                         | • Declaration DeclarationAndStatements
   12                         | Declaration • DeclarationAndStatements
   13                         | • Statement
   14                         | • Declaration
   14                         | Declaration •  [RBRACE]
   21 Declaration: • TypeSpec Declarator AuxDeclaration SEMI
   22            | • error SEMI
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    error       shift, and go to state 1
    LBRACE      shift, and go to state 40
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 42
    CHR         shift, and go to state 2
    WHILE       shift, and go to state 43
    IF          shift, and go to state 44
    INT         shift, and go to state 3
    SHORT       shift, and go to state 4
    DOUBLE      shift, and go to state 5
    RETURN      shift, and go to state 45
    VOID        shift, and go to state 6
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    RBRACE  reduce using rule 14 (DeclarationAndStatements)

    DeclarationAndStatements  go to state 90
    Declaration               go to state 47
    TypeSpec                  go to state 48
    Statement                 go to state 49
    Expr_comma                go to state 50
    Expr                      go to state 36


State 48

   21 Declaration: TypeSpec • Declarator AuxDeclaration SEMI
   30 Declarator: • IDENTIFIER ASSIGN Expr_comma
   31           | • IDENTIFIER

    IDENTIFIER  shift, and go to state 91

    Declarator  go to state 20


State 49

   11 DeclarationAndStatements: • Statement DeclarationAndStatements
   11                         | Statement • DeclarationAndStatements
   12                         | • Declaration DeclarationAndStatements
   13                         | • Statement
   13                         | Statement •  [RBRACE]
   14                         | • Declaration
   21 Declaration: • TypeSpec Declarator AuxDeclaration SEMI
   22            | • error SEMI
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    error       shift, and go to state 1
    LBRACE      shift, and go to state 40
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 42
    CHR         shift, and go to state 2
    WHILE       shift, and go to state 43
    IF          shift, and go to state 44
    INT         shift, and go to state 3
    SHORT       shift, and go to state 4
    DOUBLE      shift, and go to state 5
    RETURN      shift, and go to state 45
    VOID        shift, and go to state 6
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    RBRACE  reduce using rule 13 (DeclarationAndStatements)

    DeclarationAndStatements  go to state 92
    Declaration               go to state 47
    TypeSpec                  go to state 48
    Statement                 go to state 49
    Expr_comma                go to state 50
    Expr                      go to state 36


State 50

   40 Statement: Expr_comma • SEMI
   46 Expr_comma: Expr_comma • COMMA Expr

    COMMA  shift, and go to state 59
    SEMI   shift, and go to state 93


State 51

   23 AuxDeclaration: AuxDeclaration COMMA • Declarator
   30 Declarator: • IDENTIFIER ASSIGN Expr_comma
   31           | • IDENTIFIER

    IDENTIFIER  shift, and go to state 91

    Declarator  go to state 94


State 52

   21 Declaration: TypeSpec Declarator AuxDeclaration SEMI •

    $default  reduce using rule 21 (Declaration)


State 53

   49 Expr: LPAR error • RPAR

    RPAR  shift, and go to state 95


State 54

   46 Expr_comma: Expr_comma • COMMA Expr
   76 Expr: LPAR Expr_comma • RPAR

    COMMA  shift, and go to state 59
    RPAR   shift, and go to state 96


State 55

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr
   68     | MINUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]

    $default  reduce using rule 68 (Expr)

    Conflict between rule 68 and token BITWISEAND resolved as reduce (BITWISEAND < NOT).
    Conflict between rule 68 and token BITWISEOR resolved as reduce (BITWISEOR < NOT).
    Conflict between rule 68 and token BITWISEXOR resolved as reduce (BITWISEXOR < NOT).
    Conflict between rule 68 and token AND resolved as reduce (AND < NOT).
    Conflict between rule 68 and token ASSIGN resolved as reduce (ASSIGN < NOT).
    Conflict between rule 68 and token MUL resolved as reduce (MUL < NOT).
    Conflict between rule 68 and token DIV resolved as reduce (DIV < NOT).
    Conflict between rule 68 and token EQ resolved as reduce (EQ < NOT).
    Conflict between rule 68 and token GE resolved as reduce (GE < NOT).
    Conflict between rule 68 and token GT resolved as reduce (GT < NOT).
    Conflict between rule 68 and token LE resolved as reduce (LE < NOT).
    Conflict between rule 68 and token LT resolved as reduce (LT < NOT).
    Conflict between rule 68 and token MINUS resolved as reduce (MINUS < NOT).
    Conflict between rule 68 and token MOD resolved as reduce (MOD < NOT).
    Conflict between rule 68 and token NE resolved as reduce (NE < NOT).
    Conflict between rule 68 and token OR resolved as reduce (OR < NOT).
    Conflict between rule 68 and token PLUS resolved as reduce (PLUS < NOT).


State 56

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr
   69     | NOT Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]

    $default  reduce using rule 69 (Expr)

    Conflict between rule 69 and token BITWISEAND resolved as reduce (BITWISEAND < NOT).
    Conflict between rule 69 and token BITWISEOR resolved as reduce (BITWISEOR < NOT).
    Conflict between rule 69 and token BITWISEXOR resolved as reduce (BITWISEXOR < NOT).
    Conflict between rule 69 and token AND resolved as reduce (AND < NOT).
    Conflict between rule 69 and token ASSIGN resolved as reduce (ASSIGN < NOT).
    Conflict between rule 69 and token MUL resolved as reduce (MUL < NOT).
    Conflict between rule 69 and token DIV resolved as reduce (DIV < NOT).
    Conflict between rule 69 and token EQ resolved as reduce (EQ < NOT).
    Conflict between rule 69 and token GE resolved as reduce (GE < NOT).
    Conflict between rule 69 and token GT resolved as reduce (GT < NOT).
    Conflict between rule 69 and token LE resolved as reduce (LE < NOT).
    Conflict between rule 69 and token LT resolved as reduce (LT < NOT).
    Conflict between rule 69 and token MINUS resolved as reduce (MINUS < NOT).
    Conflict between rule 69 and token MOD resolved as reduce (MOD < NOT).
    Conflict between rule 69 and token NE resolved as reduce (NE < NOT).
    Conflict between rule 69 and token OR resolved as reduce (OR < NOT).
    Conflict between rule 69 and token PLUS resolved as reduce (PLUS < NOT).


State 57

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr
   67     | PLUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]

    $default  reduce using rule 67 (Expr)

    Conflict between rule 67 and token BITWISEAND resolved as reduce (BITWISEAND < NOT).
    Conflict between rule 67 and token BITWISEOR resolved as reduce (BITWISEOR < NOT).
    Conflict between rule 67 and token BITWISEXOR resolved as reduce (BITWISEXOR < NOT).
    Conflict between rule 67 and token AND resolved as reduce (AND < NOT).
    Conflict between rule 67 and token ASSIGN resolved as reduce (ASSIGN < NOT).
    Conflict between rule 67 and token MUL resolved as reduce (MUL < NOT).
    Conflict between rule 67 and token DIV resolved as reduce (DIV < NOT).
    Conflict between rule 67 and token EQ resolved as reduce (EQ < NOT).
    Conflict between rule 67 and token GE resolved as reduce (GE < NOT).
    Conflict between rule 67 and token GT resolved as reduce (GT < NOT).
    Conflict between rule 67 and token LE resolved as reduce (LE < NOT).
    Conflict between rule 67 and token LT resolved as reduce (LT < NOT).
    Conflict between rule 67 and token MINUS resolved as reduce (MINUS < NOT).
    Conflict between rule 67 and token MOD resolved as reduce (MOD < NOT).
    Conflict between rule 67 and token NE resolved as reduce (NE < NOT).
    Conflict between rule 67 and token OR resolved as reduce (OR < NOT).
    Conflict between rule 67 and token PLUS resolved as reduce (PLUS < NOT).


State 58

   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   48     | IDENTIFIER LPAR • error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   70     | IDENTIFIER LPAR • RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   71     | IDENTIFIER LPAR • Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    error       shift, and go to state 97
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    RPAR        shift, and go to state 98
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr_comma  go to state 99
    Expr        go to state 36


State 59

   46 Expr_comma: Expr_comma COMMA • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 100


State 60

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   58     | Expr BITWISEAND • Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 101


State 61

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   59     | Expr BITWISEOR • Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 102


State 62

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   60     | Expr BITWISEXOR • Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 103


State 63

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   57     | Expr AND • Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 104


State 64

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   50     | Expr ASSIGN • Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 105


State 65

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   53     | Expr MUL • Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 106


State 66

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   54     | Expr DIV • Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 107


State 67

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   61     | Expr EQ • Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 108


State 68

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   64     | Expr GE • Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 109


State 69

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   66     | Expr GT • Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 110


State 70

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   63     | Expr LE • Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 111


State 71

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   65     | Expr LT • Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 112


State 72

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   52     | Expr MINUS • Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 113


State 73

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   55     | Expr MOD • Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 114


State 74

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   62     | Expr NE • Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 115


State 75

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   56     | Expr OR • Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 116


State 76

   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   51     | Expr PLUS • Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 117


State 77

   18 ParameterList: ParameterList COMMA • ParameterDeclaration
   19 ParameterDeclaration: • TypeSpec IDENTIFIER
   20                     | • TypeSpec
   25 TypeSpec: • CHR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHR     shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    VOID    shift, and go to state 6

    ParameterDeclaration  go to state 118
    TypeSpec              go to state 39


State 78

   16 FunctionDeclarator: IDENTIFIER LPAR ParameterList RPAR •

    $default  reduce using rule 16 (FunctionDeclarator)


State 79

   19 ParameterDeclaration: TypeSpec IDENTIFIER •

    $default  reduce using rule 19 (ParameterDeclaration)


State 80

   32 Statement_error: error • SEMI
   38 Statement: LBRACE error • RBRACE

    RBRACE  shift, and go to state 119
    SEMI    shift, and go to state 120


State 81

   39 Statement: LBRACE RBRACE •

    $default  reduce using rule 39 (Statement)


State 82

   35 AuxStatement: Statement_error •

    $default  reduce using rule 35 (AuxStatement)


State 83

   32 Statement_error: • error SEMI
   33                | • Statement
   34 AuxStatement: AuxStatement • Statement_error
   36 Statement: • LBRACE AuxStatement RBRACE
   36          | LBRACE AuxStatement • RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    error       shift, and go to state 121
    LBRACE      shift, and go to state 40
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    RBRACE      shift, and go to state 122
    SEMI        shift, and go to state 42
    WHILE       shift, and go to state 43
    IF          shift, and go to state 44
    RETURN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement_error  go to state 123
    Statement        go to state 84
    Expr_comma       go to state 50
    Expr             go to state 36


State 84

   33 Statement_error: Statement •

    $default  reduce using rule 33 (Statement_error)


State 85

   43 Statement: WHILE LPAR • Expr_comma RPAR Statement_error
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr_comma  go to state 124
    Expr        go to state 36


State 86

   41 Statement: IF LPAR • Expr_comma RPAR Statement_error ELSE Statement_error
   42          | IF LPAR • Expr_comma RPAR Statement_error
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr_comma  go to state 125
    Expr        go to state 36


State 87

   45 Statement: RETURN SEMI •

    $default  reduce using rule 45 (Statement)


State 88

   44 Statement: RETURN Expr_comma • SEMI
   46 Expr_comma: Expr_comma • COMMA Expr

    COMMA  shift, and go to state 59
    SEMI   shift, and go to state 126


State 89

    9 FunctionBody: LBRACE DeclarationAndStatements RBRACE •

    $default  reduce using rule 9 (FunctionBody)


State 90

   12 DeclarationAndStatements: Declaration DeclarationAndStatements •

    $default  reduce using rule 12 (DeclarationAndStatements)


State 91

   30 Declarator: IDENTIFIER • ASSIGN Expr_comma
   31           | IDENTIFIER •  [COMMA, SEMI]

    ASSIGN  shift, and go to state 21

    $default  reduce using rule 31 (Declarator)


State 92

   11 DeclarationAndStatements: Statement DeclarationAndStatements •

    $default  reduce using rule 11 (DeclarationAndStatements)


State 93

   40 Statement: Expr_comma SEMI •

    $default  reduce using rule 40 (Statement)


State 94

   23 AuxDeclaration: AuxDeclaration COMMA Declarator •

    $default  reduce using rule 23 (AuxDeclaration)


State 95

   49 Expr: LPAR error RPAR •

    $default  reduce using rule 49 (Expr)


State 96

   76 Expr: LPAR Expr_comma RPAR •

    $default  reduce using rule 76 (Expr)


State 97

   48 Expr: IDENTIFIER LPAR error • RPAR

    RPAR  shift, and go to state 127


State 98

   70 Expr: IDENTIFIER LPAR RPAR •

    $default  reduce using rule 70 (Expr)


State 99

   46 Expr_comma: Expr_comma • COMMA Expr
   71 Expr: IDENTIFIER LPAR Expr_comma • RPAR

    COMMA  shift, and go to state 59
    RPAR   shift, and go to state 128


State 100

   46 Expr_comma: Expr_comma COMMA Expr •  [COMMA, RPAR, SEMI]
   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    BITWISEAND  shift, and go to state 60
    BITWISEOR   shift, and go to state 61
    BITWISEXOR  shift, and go to state 62
    AND         shift, and go to state 63
    ASSIGN      shift, and go to state 64
    MUL         shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76

    $default  reduce using rule 46 (Expr_comma)


State 101

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   58     | Expr BITWISEAND Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    MUL    shift, and go to state 65
    DIV    shift, and go to state 66
    EQ     shift, and go to state 67
    GE     shift, and go to state 68
    GT     shift, and go to state 69
    LE     shift, and go to state 70
    LT     shift, and go to state 71
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    NE     shift, and go to state 74
    PLUS   shift, and go to state 76

    $default  reduce using rule 58 (Expr)

    Conflict between rule 58 and token BITWISEAND resolved as reduce (%left BITWISEAND).
    Conflict between rule 58 and token BITWISEOR resolved as reduce (BITWISEOR < BITWISEAND).
    Conflict between rule 58 and token BITWISEXOR resolved as reduce (BITWISEXOR < BITWISEAND).
    Conflict between rule 58 and token AND resolved as reduce (AND < BITWISEAND).
    Conflict between rule 58 and token ASSIGN resolved as reduce (ASSIGN < BITWISEAND).
    Conflict between rule 58 and token MUL resolved as shift (BITWISEAND < MUL).
    Conflict between rule 58 and token DIV resolved as shift (BITWISEAND < DIV).
    Conflict between rule 58 and token EQ resolved as shift (BITWISEAND < EQ).
    Conflict between rule 58 and token GE resolved as shift (BITWISEAND < GE).
    Conflict between rule 58 and token GT resolved as shift (BITWISEAND < GT).
    Conflict between rule 58 and token LE resolved as shift (BITWISEAND < LE).
    Conflict between rule 58 and token LT resolved as shift (BITWISEAND < LT).
    Conflict between rule 58 and token MINUS resolved as shift (BITWISEAND < MINUS).
    Conflict between rule 58 and token MOD resolved as shift (BITWISEAND < MOD).
    Conflict between rule 58 and token NE resolved as shift (BITWISEAND < NE).
    Conflict between rule 58 and token OR resolved as reduce (OR < BITWISEAND).
    Conflict between rule 58 and token PLUS resolved as shift (BITWISEAND < PLUS).


State 102

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   59     | Expr BITWISEOR Expr •  [BITWISEOR, AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    BITWISEAND  shift, and go to state 60
    BITWISEXOR  shift, and go to state 62
    MUL         shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    PLUS        shift, and go to state 76

    $default  reduce using rule 59 (Expr)

    Conflict between rule 59 and token BITWISEAND resolved as shift (BITWISEOR < BITWISEAND).
    Conflict between rule 59 and token BITWISEOR resolved as reduce (%left BITWISEOR).
    Conflict between rule 59 and token BITWISEXOR resolved as shift (BITWISEOR < BITWISEXOR).
    Conflict between rule 59 and token AND resolved as reduce (AND < BITWISEOR).
    Conflict between rule 59 and token ASSIGN resolved as reduce (ASSIGN < BITWISEOR).
    Conflict between rule 59 and token MUL resolved as shift (BITWISEOR < MUL).
    Conflict between rule 59 and token DIV resolved as shift (BITWISEOR < DIV).
    Conflict between rule 59 and token EQ resolved as shift (BITWISEOR < EQ).
    Conflict between rule 59 and token GE resolved as shift (BITWISEOR < GE).
    Conflict between rule 59 and token GT resolved as shift (BITWISEOR < GT).
    Conflict between rule 59 and token LE resolved as shift (BITWISEOR < LE).
    Conflict between rule 59 and token LT resolved as shift (BITWISEOR < LT).
    Conflict between rule 59 and token MINUS resolved as shift (BITWISEOR < MINUS).
    Conflict between rule 59 and token MOD resolved as shift (BITWISEOR < MOD).
    Conflict between rule 59 and token NE resolved as shift (BITWISEOR < NE).
    Conflict between rule 59 and token OR resolved as reduce (OR < BITWISEOR).
    Conflict between rule 59 and token PLUS resolved as shift (BITWISEOR < PLUS).


State 103

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   60     | Expr BITWISEXOR Expr •  [BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    BITWISEAND  shift, and go to state 60
    MUL         shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    PLUS        shift, and go to state 76

    $default  reduce using rule 60 (Expr)

    Conflict between rule 60 and token BITWISEAND resolved as shift (BITWISEXOR < BITWISEAND).
    Conflict between rule 60 and token BITWISEOR resolved as reduce (BITWISEOR < BITWISEXOR).
    Conflict between rule 60 and token BITWISEXOR resolved as reduce (%left BITWISEXOR).
    Conflict between rule 60 and token AND resolved as reduce (AND < BITWISEXOR).
    Conflict between rule 60 and token ASSIGN resolved as reduce (ASSIGN < BITWISEXOR).
    Conflict between rule 60 and token MUL resolved as shift (BITWISEXOR < MUL).
    Conflict between rule 60 and token DIV resolved as shift (BITWISEXOR < DIV).
    Conflict between rule 60 and token EQ resolved as shift (BITWISEXOR < EQ).
    Conflict between rule 60 and token GE resolved as shift (BITWISEXOR < GE).
    Conflict between rule 60 and token GT resolved as shift (BITWISEXOR < GT).
    Conflict between rule 60 and token LE resolved as shift (BITWISEXOR < LE).
    Conflict between rule 60 and token LT resolved as shift (BITWISEXOR < LT).
    Conflict between rule 60 and token MINUS resolved as shift (BITWISEXOR < MINUS).
    Conflict between rule 60 and token MOD resolved as shift (BITWISEXOR < MOD).
    Conflict between rule 60 and token NE resolved as shift (BITWISEXOR < NE).
    Conflict between rule 60 and token OR resolved as reduce (OR < BITWISEXOR).
    Conflict between rule 60 and token PLUS resolved as shift (BITWISEXOR < PLUS).


State 104

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   57     | Expr AND Expr •  [AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    BITWISEAND  shift, and go to state 60
    BITWISEOR   shift, and go to state 61
    BITWISEXOR  shift, and go to state 62
    MUL         shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    PLUS        shift, and go to state 76

    $default  reduce using rule 57 (Expr)

    Conflict between rule 57 and token BITWISEAND resolved as shift (AND < BITWISEAND).
    Conflict between rule 57 and token BITWISEOR resolved as shift (AND < BITWISEOR).
    Conflict between rule 57 and token BITWISEXOR resolved as shift (AND < BITWISEXOR).
    Conflict between rule 57 and token AND resolved as reduce (%left AND).
    Conflict between rule 57 and token ASSIGN resolved as reduce (ASSIGN < AND).
    Conflict between rule 57 and token MUL resolved as shift (AND < MUL).
    Conflict between rule 57 and token DIV resolved as shift (AND < DIV).
    Conflict between rule 57 and token EQ resolved as shift (AND < EQ).
    Conflict between rule 57 and token GE resolved as shift (AND < GE).
    Conflict between rule 57 and token GT resolved as shift (AND < GT).
    Conflict between rule 57 and token LE resolved as shift (AND < LE).
    Conflict between rule 57 and token LT resolved as shift (AND < LT).
    Conflict between rule 57 and token MINUS resolved as shift (AND < MINUS).
    Conflict between rule 57 and token MOD resolved as shift (AND < MOD).
    Conflict between rule 57 and token NE resolved as shift (AND < NE).
    Conflict between rule 57 and token OR resolved as reduce (OR < AND).
    Conflict between rule 57 and token PLUS resolved as shift (AND < PLUS).


State 105

   50 Expr: Expr • ASSIGN Expr
   50     | Expr ASSIGN Expr •  [COMMA, RPAR, SEMI]
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    BITWISEAND  shift, and go to state 60
    BITWISEOR   shift, and go to state 61
    BITWISEXOR  shift, and go to state 62
    AND         shift, and go to state 63
    ASSIGN      shift, and go to state 64
    MUL         shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76

    $default  reduce using rule 50 (Expr)

    Conflict between rule 50 and token BITWISEAND resolved as shift (ASSIGN < BITWISEAND).
    Conflict between rule 50 and token BITWISEOR resolved as shift (ASSIGN < BITWISEOR).
    Conflict between rule 50 and token BITWISEXOR resolved as shift (ASSIGN < BITWISEXOR).
    Conflict between rule 50 and token AND resolved as shift (ASSIGN < AND).
    Conflict between rule 50 and token ASSIGN resolved as shift (%right ASSIGN).
    Conflict between rule 50 and token MUL resolved as shift (ASSIGN < MUL).
    Conflict between rule 50 and token DIV resolved as shift (ASSIGN < DIV).
    Conflict between rule 50 and token EQ resolved as shift (ASSIGN < EQ).
    Conflict between rule 50 and token GE resolved as shift (ASSIGN < GE).
    Conflict between rule 50 and token GT resolved as shift (ASSIGN < GT).
    Conflict between rule 50 and token LE resolved as shift (ASSIGN < LE).
    Conflict between rule 50 and token LT resolved as shift (ASSIGN < LT).
    Conflict between rule 50 and token MINUS resolved as shift (ASSIGN < MINUS).
    Conflict between rule 50 and token MOD resolved as shift (ASSIGN < MOD).
    Conflict between rule 50 and token NE resolved as shift (ASSIGN < NE).
    Conflict between rule 50 and token OR resolved as shift (ASSIGN < OR).
    Conflict between rule 50 and token PLUS resolved as shift (ASSIGN < PLUS).


State 106

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   53     | Expr MUL Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    $default  reduce using rule 53 (Expr)

    Conflict between rule 53 and token BITWISEAND resolved as reduce (BITWISEAND < MUL).
    Conflict between rule 53 and token BITWISEOR resolved as reduce (BITWISEOR < MUL).
    Conflict between rule 53 and token BITWISEXOR resolved as reduce (BITWISEXOR < MUL).
    Conflict between rule 53 and token AND resolved as reduce (AND < MUL).
    Conflict between rule 53 and token ASSIGN resolved as reduce (ASSIGN < MUL).
    Conflict between rule 53 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 53 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 53 and token EQ resolved as reduce (EQ < MUL).
    Conflict between rule 53 and token GE resolved as reduce (GE < MUL).
    Conflict between rule 53 and token GT resolved as reduce (GT < MUL).
    Conflict between rule 53 and token LE resolved as reduce (LE < MUL).
    Conflict between rule 53 and token LT resolved as reduce (LT < MUL).
    Conflict between rule 53 and token MINUS resolved as reduce (MINUS < MUL).
    Conflict between rule 53 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 53 and token NE resolved as reduce (NE < MUL).
    Conflict between rule 53 and token OR resolved as reduce (OR < MUL).
    Conflict between rule 53 and token PLUS resolved as reduce (PLUS < MUL).


State 107

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   54     | Expr DIV Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    $default  reduce using rule 54 (Expr)

    Conflict between rule 54 and token BITWISEAND resolved as reduce (BITWISEAND < DIV).
    Conflict between rule 54 and token BITWISEOR resolved as reduce (BITWISEOR < DIV).
    Conflict between rule 54 and token BITWISEXOR resolved as reduce (BITWISEXOR < DIV).
    Conflict between rule 54 and token AND resolved as reduce (AND < DIV).
    Conflict between rule 54 and token ASSIGN resolved as reduce (ASSIGN < DIV).
    Conflict between rule 54 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 54 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 54 and token EQ resolved as reduce (EQ < DIV).
    Conflict between rule 54 and token GE resolved as reduce (GE < DIV).
    Conflict between rule 54 and token GT resolved as reduce (GT < DIV).
    Conflict between rule 54 and token LE resolved as reduce (LE < DIV).
    Conflict between rule 54 and token LT resolved as reduce (LT < DIV).
    Conflict between rule 54 and token MINUS resolved as reduce (MINUS < DIV).
    Conflict between rule 54 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 54 and token NE resolved as reduce (NE < DIV).
    Conflict between rule 54 and token OR resolved as reduce (OR < DIV).
    Conflict between rule 54 and token PLUS resolved as reduce (PLUS < DIV).


State 108

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   61     | Expr EQ Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, NE, OR, RPAR, SEMI]
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    MUL    shift, and go to state 65
    DIV    shift, and go to state 66
    GE     shift, and go to state 68
    GT     shift, and go to state 69
    LE     shift, and go to state 70
    LT     shift, and go to state 71
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 61 (Expr)

    Conflict between rule 61 and token BITWISEAND resolved as reduce (BITWISEAND < EQ).
    Conflict between rule 61 and token BITWISEOR resolved as reduce (BITWISEOR < EQ).
    Conflict between rule 61 and token BITWISEXOR resolved as reduce (BITWISEXOR < EQ).
    Conflict between rule 61 and token AND resolved as reduce (AND < EQ).
    Conflict between rule 61 and token ASSIGN resolved as reduce (ASSIGN < EQ).
    Conflict between rule 61 and token MUL resolved as shift (EQ < MUL).
    Conflict between rule 61 and token DIV resolved as shift (EQ < DIV).
    Conflict between rule 61 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 61 and token GE resolved as shift (EQ < GE).
    Conflict between rule 61 and token GT resolved as shift (EQ < GT).
    Conflict between rule 61 and token LE resolved as shift (EQ < LE).
    Conflict between rule 61 and token LT resolved as shift (EQ < LT).
    Conflict between rule 61 and token MINUS resolved as shift (EQ < MINUS).
    Conflict between rule 61 and token MOD resolved as shift (EQ < MOD).
    Conflict between rule 61 and token NE resolved as reduce (%left NE).
    Conflict between rule 61 and token OR resolved as reduce (OR < EQ).
    Conflict between rule 61 and token PLUS resolved as shift (EQ < PLUS).


State 109

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   64     | Expr GE Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    MUL    shift, and go to state 65
    DIV    shift, and go to state 66
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 64 (Expr)

    Conflict between rule 64 and token BITWISEAND resolved as reduce (BITWISEAND < GE).
    Conflict between rule 64 and token BITWISEOR resolved as reduce (BITWISEOR < GE).
    Conflict between rule 64 and token BITWISEXOR resolved as reduce (BITWISEXOR < GE).
    Conflict between rule 64 and token AND resolved as reduce (AND < GE).
    Conflict between rule 64 and token ASSIGN resolved as reduce (ASSIGN < GE).
    Conflict between rule 64 and token MUL resolved as shift (GE < MUL).
    Conflict between rule 64 and token DIV resolved as shift (GE < DIV).
    Conflict between rule 64 and token EQ resolved as reduce (EQ < GE).
    Conflict between rule 64 and token GE resolved as reduce (%left GE).
    Conflict between rule 64 and token GT resolved as reduce (%left GT).
    Conflict between rule 64 and token LE resolved as reduce (%left LE).
    Conflict between rule 64 and token LT resolved as reduce (%left LT).
    Conflict between rule 64 and token MINUS resolved as shift (GE < MINUS).
    Conflict between rule 64 and token MOD resolved as shift (GE < MOD).
    Conflict between rule 64 and token NE resolved as reduce (NE < GE).
    Conflict between rule 64 and token OR resolved as reduce (OR < GE).
    Conflict between rule 64 and token PLUS resolved as shift (GE < PLUS).


State 110

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr
   66     | Expr GT Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]

    MUL    shift, and go to state 65
    DIV    shift, and go to state 66
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 66 (Expr)

    Conflict between rule 66 and token BITWISEAND resolved as reduce (BITWISEAND < GT).
    Conflict between rule 66 and token BITWISEOR resolved as reduce (BITWISEOR < GT).
    Conflict between rule 66 and token BITWISEXOR resolved as reduce (BITWISEXOR < GT).
    Conflict between rule 66 and token AND resolved as reduce (AND < GT).
    Conflict between rule 66 and token ASSIGN resolved as reduce (ASSIGN < GT).
    Conflict between rule 66 and token MUL resolved as shift (GT < MUL).
    Conflict between rule 66 and token DIV resolved as shift (GT < DIV).
    Conflict between rule 66 and token EQ resolved as reduce (EQ < GT).
    Conflict between rule 66 and token GE resolved as reduce (%left GE).
    Conflict between rule 66 and token GT resolved as reduce (%left GT).
    Conflict between rule 66 and token LE resolved as reduce (%left LE).
    Conflict between rule 66 and token LT resolved as reduce (%left LT).
    Conflict between rule 66 and token MINUS resolved as shift (GT < MINUS).
    Conflict between rule 66 and token MOD resolved as shift (GT < MOD).
    Conflict between rule 66 and token NE resolved as reduce (NE < GT).
    Conflict between rule 66 and token OR resolved as reduce (OR < GT).
    Conflict between rule 66 and token PLUS resolved as shift (GT < PLUS).


State 111

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   63     | Expr LE Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    MUL    shift, and go to state 65
    DIV    shift, and go to state 66
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 63 (Expr)

    Conflict between rule 63 and token BITWISEAND resolved as reduce (BITWISEAND < LE).
    Conflict between rule 63 and token BITWISEOR resolved as reduce (BITWISEOR < LE).
    Conflict between rule 63 and token BITWISEXOR resolved as reduce (BITWISEXOR < LE).
    Conflict between rule 63 and token AND resolved as reduce (AND < LE).
    Conflict between rule 63 and token ASSIGN resolved as reduce (ASSIGN < LE).
    Conflict between rule 63 and token MUL resolved as shift (LE < MUL).
    Conflict between rule 63 and token DIV resolved as shift (LE < DIV).
    Conflict between rule 63 and token EQ resolved as reduce (EQ < LE).
    Conflict between rule 63 and token GE resolved as reduce (%left GE).
    Conflict between rule 63 and token GT resolved as reduce (%left GT).
    Conflict between rule 63 and token LE resolved as reduce (%left LE).
    Conflict between rule 63 and token LT resolved as reduce (%left LT).
    Conflict between rule 63 and token MINUS resolved as shift (LE < MINUS).
    Conflict between rule 63 and token MOD resolved as shift (LE < MOD).
    Conflict between rule 63 and token NE resolved as reduce (NE < LE).
    Conflict between rule 63 and token OR resolved as reduce (OR < LE).
    Conflict between rule 63 and token PLUS resolved as shift (LE < PLUS).


State 112

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   65     | Expr LT Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]
   66     | Expr • GT Expr

    MUL    shift, and go to state 65
    DIV    shift, and go to state 66
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 65 (Expr)

    Conflict between rule 65 and token BITWISEAND resolved as reduce (BITWISEAND < LT).
    Conflict between rule 65 and token BITWISEOR resolved as reduce (BITWISEOR < LT).
    Conflict between rule 65 and token BITWISEXOR resolved as reduce (BITWISEXOR < LT).
    Conflict between rule 65 and token AND resolved as reduce (AND < LT).
    Conflict between rule 65 and token ASSIGN resolved as reduce (ASSIGN < LT).
    Conflict between rule 65 and token MUL resolved as shift (LT < MUL).
    Conflict between rule 65 and token DIV resolved as shift (LT < DIV).
    Conflict between rule 65 and token EQ resolved as reduce (EQ < LT).
    Conflict between rule 65 and token GE resolved as reduce (%left GE).
    Conflict between rule 65 and token GT resolved as reduce (%left GT).
    Conflict between rule 65 and token LE resolved as reduce (%left LE).
    Conflict between rule 65 and token LT resolved as reduce (%left LT).
    Conflict between rule 65 and token MINUS resolved as shift (LT < MINUS).
    Conflict between rule 65 and token MOD resolved as shift (LT < MOD).
    Conflict between rule 65 and token NE resolved as reduce (NE < LT).
    Conflict between rule 65 and token OR resolved as reduce (OR < LT).
    Conflict between rule 65 and token PLUS resolved as shift (LT < PLUS).


State 113

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   52     | Expr MINUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, MINUS, NE, OR, PLUS, RPAR, SEMI]
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    MUL  shift, and go to state 65
    DIV  shift, and go to state 66
    MOD  shift, and go to state 73

    $default  reduce using rule 52 (Expr)

    Conflict between rule 52 and token BITWISEAND resolved as reduce (BITWISEAND < MINUS).
    Conflict between rule 52 and token BITWISEOR resolved as reduce (BITWISEOR < MINUS).
    Conflict between rule 52 and token BITWISEXOR resolved as reduce (BITWISEXOR < MINUS).
    Conflict between rule 52 and token AND resolved as reduce (AND < MINUS).
    Conflict between rule 52 and token ASSIGN resolved as reduce (ASSIGN < MINUS).
    Conflict between rule 52 and token MUL resolved as shift (MINUS < MUL).
    Conflict between rule 52 and token DIV resolved as shift (MINUS < DIV).
    Conflict between rule 52 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 52 and token GE resolved as reduce (GE < MINUS).
    Conflict between rule 52 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 52 and token LE resolved as reduce (LE < MINUS).
    Conflict between rule 52 and token LT resolved as reduce (LT < MINUS).
    Conflict between rule 52 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 52 and token MOD resolved as shift (MINUS < MOD).
    Conflict between rule 52 and token NE resolved as reduce (NE < MINUS).
    Conflict between rule 52 and token OR resolved as reduce (OR < MINUS).
    Conflict between rule 52 and token PLUS resolved as reduce (%left PLUS).


State 114

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   55     | Expr MOD Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    $default  reduce using rule 55 (Expr)

    Conflict between rule 55 and token BITWISEAND resolved as reduce (BITWISEAND < MOD).
    Conflict between rule 55 and token BITWISEOR resolved as reduce (BITWISEOR < MOD).
    Conflict between rule 55 and token BITWISEXOR resolved as reduce (BITWISEXOR < MOD).
    Conflict between rule 55 and token AND resolved as reduce (AND < MOD).
    Conflict between rule 55 and token ASSIGN resolved as reduce (ASSIGN < MOD).
    Conflict between rule 55 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 55 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 55 and token EQ resolved as reduce (EQ < MOD).
    Conflict between rule 55 and token GE resolved as reduce (GE < MOD).
    Conflict between rule 55 and token GT resolved as reduce (GT < MOD).
    Conflict between rule 55 and token LE resolved as reduce (LE < MOD).
    Conflict between rule 55 and token LT resolved as reduce (LT < MOD).
    Conflict between rule 55 and token MINUS resolved as reduce (MINUS < MOD).
    Conflict between rule 55 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 55 and token NE resolved as reduce (NE < MOD).
    Conflict between rule 55 and token OR resolved as reduce (OR < MOD).
    Conflict between rule 55 and token PLUS resolved as reduce (PLUS < MOD).


State 115

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   62     | Expr NE Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, NE, OR, RPAR, SEMI]
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    MUL    shift, and go to state 65
    DIV    shift, and go to state 66
    GE     shift, and go to state 68
    GT     shift, and go to state 69
    LE     shift, and go to state 70
    LT     shift, and go to state 71
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 62 (Expr)

    Conflict between rule 62 and token BITWISEAND resolved as reduce (BITWISEAND < NE).
    Conflict between rule 62 and token BITWISEOR resolved as reduce (BITWISEOR < NE).
    Conflict between rule 62 and token BITWISEXOR resolved as reduce (BITWISEXOR < NE).
    Conflict between rule 62 and token AND resolved as reduce (AND < NE).
    Conflict between rule 62 and token ASSIGN resolved as reduce (ASSIGN < NE).
    Conflict between rule 62 and token MUL resolved as shift (NE < MUL).
    Conflict between rule 62 and token DIV resolved as shift (NE < DIV).
    Conflict between rule 62 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 62 and token GE resolved as shift (NE < GE).
    Conflict between rule 62 and token GT resolved as shift (NE < GT).
    Conflict between rule 62 and token LE resolved as shift (NE < LE).
    Conflict between rule 62 and token LT resolved as shift (NE < LT).
    Conflict between rule 62 and token MINUS resolved as shift (NE < MINUS).
    Conflict between rule 62 and token MOD resolved as shift (NE < MOD).
    Conflict between rule 62 and token NE resolved as reduce (%left NE).
    Conflict between rule 62 and token OR resolved as reduce (OR < NE).
    Conflict between rule 62 and token PLUS resolved as shift (NE < PLUS).


State 116

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   56     | Expr OR Expr •  [ASSIGN, COMMA, OR, RPAR, SEMI]
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    BITWISEAND  shift, and go to state 60
    BITWISEOR   shift, and go to state 61
    BITWISEXOR  shift, and go to state 62
    AND         shift, and go to state 63
    MUL         shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    PLUS        shift, and go to state 76

    $default  reduce using rule 56 (Expr)

    Conflict between rule 56 and token BITWISEAND resolved as shift (OR < BITWISEAND).
    Conflict between rule 56 and token BITWISEOR resolved as shift (OR < BITWISEOR).
    Conflict between rule 56 and token BITWISEXOR resolved as shift (OR < BITWISEXOR).
    Conflict between rule 56 and token AND resolved as shift (OR < AND).
    Conflict between rule 56 and token ASSIGN resolved as reduce (ASSIGN < OR).
    Conflict between rule 56 and token MUL resolved as shift (OR < MUL).
    Conflict between rule 56 and token DIV resolved as shift (OR < DIV).
    Conflict between rule 56 and token EQ resolved as shift (OR < EQ).
    Conflict between rule 56 and token GE resolved as shift (OR < GE).
    Conflict between rule 56 and token GT resolved as shift (OR < GT).
    Conflict between rule 56 and token LE resolved as shift (OR < LE).
    Conflict between rule 56 and token LT resolved as shift (OR < LT).
    Conflict between rule 56 and token MINUS resolved as shift (OR < MINUS).
    Conflict between rule 56 and token MOD resolved as shift (OR < MOD).
    Conflict between rule 56 and token NE resolved as shift (OR < NE).
    Conflict between rule 56 and token OR resolved as reduce (%left OR).
    Conflict between rule 56 and token PLUS resolved as shift (OR < PLUS).


State 117

   50 Expr: Expr • ASSIGN Expr
   51     | Expr • PLUS Expr
   51     | Expr PLUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, MINUS, NE, OR, PLUS, RPAR, SEMI]
   52     | Expr • MINUS Expr
   53     | Expr • MUL Expr
   54     | Expr • DIV Expr
   55     | Expr • MOD Expr
   56     | Expr • OR Expr
   57     | Expr • AND Expr
   58     | Expr • BITWISEAND Expr
   59     | Expr • BITWISEOR Expr
   60     | Expr • BITWISEXOR Expr
   61     | Expr • EQ Expr
   62     | Expr • NE Expr
   63     | Expr • LE Expr
   64     | Expr • GE Expr
   65     | Expr • LT Expr
   66     | Expr • GT Expr

    MUL  shift, and go to state 65
    DIV  shift, and go to state 66
    MOD  shift, and go to state 73

    $default  reduce using rule 51 (Expr)

    Conflict between rule 51 and token BITWISEAND resolved as reduce (BITWISEAND < PLUS).
    Conflict between rule 51 and token BITWISEOR resolved as reduce (BITWISEOR < PLUS).
    Conflict between rule 51 and token BITWISEXOR resolved as reduce (BITWISEXOR < PLUS).
    Conflict between rule 51 and token AND resolved as reduce (AND < PLUS).
    Conflict between rule 51 and token ASSIGN resolved as reduce (ASSIGN < PLUS).
    Conflict between rule 51 and token MUL resolved as shift (PLUS < MUL).
    Conflict between rule 51 and token DIV resolved as shift (PLUS < DIV).
    Conflict between rule 51 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 51 and token GE resolved as reduce (GE < PLUS).
    Conflict between rule 51 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 51 and token LE resolved as reduce (LE < PLUS).
    Conflict between rule 51 and token LT resolved as reduce (LT < PLUS).
    Conflict between rule 51 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 51 and token MOD resolved as shift (PLUS < MOD).
    Conflict between rule 51 and token NE resolved as reduce (NE < PLUS).
    Conflict between rule 51 and token OR resolved as reduce (OR < PLUS).
    Conflict between rule 51 and token PLUS resolved as reduce (%left PLUS).


State 118

   18 ParameterList: ParameterList COMMA ParameterDeclaration •

    $default  reduce using rule 18 (ParameterList)


State 119

   38 Statement: LBRACE error RBRACE •

    $default  reduce using rule 38 (Statement)


State 120

   32 Statement_error: error SEMI •

    $default  reduce using rule 32 (Statement_error)


State 121

   32 Statement_error: error • SEMI

    SEMI  shift, and go to state 120


State 122

   36 Statement: LBRACE AuxStatement RBRACE •

    $default  reduce using rule 36 (Statement)


State 123

   34 AuxStatement: AuxStatement Statement_error •

    $default  reduce using rule 34 (AuxStatement)


State 124

   43 Statement: WHILE LPAR Expr_comma • RPAR Statement_error
   46 Expr_comma: Expr_comma • COMMA Expr

    COMMA  shift, and go to state 59
    RPAR   shift, and go to state 129


State 125

   41 Statement: IF LPAR Expr_comma • RPAR Statement_error ELSE Statement_error
   42          | IF LPAR Expr_comma • RPAR Statement_error
   46 Expr_comma: Expr_comma • COMMA Expr

    COMMA  shift, and go to state 59
    RPAR   shift, and go to state 130


State 126

   44 Statement: RETURN Expr_comma SEMI •

    $default  reduce using rule 44 (Statement)


State 127

   48 Expr: IDENTIFIER LPAR error RPAR •

    $default  reduce using rule 48 (Expr)


State 128

   71 Expr: IDENTIFIER LPAR Expr_comma RPAR •

    $default  reduce using rule 71 (Expr)


State 129

   32 Statement_error: • error SEMI
   33                | • Statement
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   43          | WHILE LPAR Expr_comma RPAR • Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    error       shift, and go to state 121
    LBRACE      shift, and go to state 40
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 42
    WHILE       shift, and go to state 43
    IF          shift, and go to state 44
    RETURN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement_error  go to state 131
    Statement        go to state 84
    Expr_comma       go to state 50
    Expr             go to state 36


State 130

   32 Statement_error: • error SEMI
   33                | • Statement
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   41          | IF LPAR Expr_comma RPAR • Statement_error ELSE Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   42          | IF LPAR Expr_comma RPAR • Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    error       shift, and go to state 121
    LBRACE      shift, and go to state 40
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 42
    WHILE       shift, and go to state 43
    IF          shift, and go to state 44
    RETURN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement_error  go to state 132
    Statement        go to state 84
    Expr_comma       go to state 50
    Expr             go to state 36


State 131

   43 Statement: WHILE LPAR Expr_comma RPAR Statement_error •

    $default  reduce using rule 43 (Statement)


State 132

   41 Statement: IF LPAR Expr_comma RPAR Statement_error • ELSE Statement_error
   42          | IF LPAR Expr_comma RPAR Statement_error •  [error, LBRACE, LPAR, MINUS, NOT, PLUS, RBRACE, SEMI, CHR, WHILE, IF, INT, SHORT, DOUBLE, RETURN, VOID, IDENTIFIER, DECIMAL, NATURAL, CHRLIT]

    ELSE  shift, and go to state 133

    $default  reduce using rule 42 (Statement)

    Conflict between rule 42 and token ELSE resolved as shift (%right ELSE).


State 133

   32 Statement_error: • error SEMI
   33                | • Statement
   36 Statement: • LBRACE AuxStatement RBRACE
   37          | • SEMI
   38          | • LBRACE error RBRACE
   39          | • LBRACE RBRACE
   40          | • Expr_comma SEMI
   41          | • IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error
   41          | IF LPAR Expr_comma RPAR Statement_error ELSE • Statement_error
   42          | • IF LPAR Expr_comma RPAR Statement_error
   43          | • WHILE LPAR Expr_comma RPAR Statement_error
   44          | • RETURN Expr_comma SEMI
   45          | • RETURN SEMI
   46 Expr_comma: • Expr_comma COMMA Expr
   47           | • Expr
   48 Expr: • IDENTIFIER LPAR error RPAR
   49     | • LPAR error RPAR
   50     | • Expr ASSIGN Expr
   51     | • Expr PLUS Expr
   52     | • Expr MINUS Expr
   53     | • Expr MUL Expr
   54     | • Expr DIV Expr
   55     | • Expr MOD Expr
   56     | • Expr OR Expr
   57     | • Expr AND Expr
   58     | • Expr BITWISEAND Expr
   59     | • Expr BITWISEOR Expr
   60     | • Expr BITWISEXOR Expr
   61     | • Expr EQ Expr
   62     | • Expr NE Expr
   63     | • Expr LE Expr
   64     | • Expr GE Expr
   65     | • Expr LT Expr
   66     | • Expr GT Expr
   67     | • PLUS Expr
   68     | • MINUS Expr
   69     | • NOT Expr
   70     | • IDENTIFIER LPAR RPAR
   71     | • IDENTIFIER LPAR Expr_comma RPAR
   72     | • IDENTIFIER
   73     | • NATURAL
   74     | • CHRLIT
   75     | • DECIMAL
   76     | • LPAR Expr_comma RPAR

    error       shift, and go to state 121
    LBRACE      shift, and go to state 40
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 42
    WHILE       shift, and go to state 43
    IF          shift, and go to state 44
    RETURN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 31
    DECIMAL     shift, and go to state 32
    NATURAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement_error  go to state 134
    Statement        go to state 84
    Expr_comma       go to state 50
    Expr             go to state 36


State 134

   41 Statement: IF LPAR Expr_comma RPAR Statement_error ELSE Statement_error •

    $default  reduce using rule 41 (Statement)
